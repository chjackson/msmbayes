// Generated by rstantools.  Do not edit by hand.

/*
    msmbayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    msmbayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with msmbayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_hmm_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 379> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 165, column 2 to column 30)",
  " (in 'string', line 167, column 2 to column 29)",
  " (in 'string', line 168, column 2 to column 29)",
  " (in 'string', line 169, column 2 to column 30)",
  " (in 'string', line 170, column 2 to column 19)",
  " (in 'string', line 171, column 2 to column 30)",
  " (in 'string', line 177, column 2 to column 18)",
  " (in 'string', line 178, column 2 to column 55)",
  " (in 'string', line 179, column 2 to column 26)",
  " (in 'string', line 211, column 2 to column 42)",
  " (in 'string', line 212, column 2 to column 42)",
  " (in 'string', line 214, column 2 to column 25)",
  " (in 'string', line 216, column 2 to column 22)",
  " (in 'string', line 272, column 2 to column 28)",
  " (in 'string', line 275, column 2 to column 22)",
  " (in 'string', line 276, column 2 to column 28)",
  " (in 'string', line 291, column 2 to column 22)",
  " (in 'string', line 183, column 10 to column 11)",
  " (in 'string', line 183, column 4 to column 26)",
  " (in 'string', line 184, column 10 to column 16)",
  " (in 'string', line 184, column 4 to column 29)",
  " (in 'string', line 186, column 6 to column 21)",
  " (in 'string', line 185, column 18 to line 187, column 5)",
  " (in 'string', line 185, column 4 to line 187, column 5)",
  " (in 'string', line 189, column 6 to column 34)",
  " (in 'string', line 190, column 6 to column 53)",
  " (in 'string', line 188, column 23 to line 191, column 5)",
  " (in 'string', line 188, column 4 to line 191, column 5)",
  " (in 'string', line 193, column 6 to column 51)",
  " (in 'string', line 192, column 18 to line 194, column 5)",
  " (in 'string', line 192, column 4 to line 194, column 5)",
  " (in 'string', line 196, column 6 to column 44)",
  " (in 'string', line 195, column 23 to line 197, column 5)",
  " (in 'string', line 195, column 4 to line 197, column 5)",
  " (in 'string', line 199, column 6 to column 35)",
  " (in 'string', line 198, column 23 to line 200, column 5)",
  " (in 'string', line 198, column 4 to line 200, column 5)",
  " (in 'string', line 182, column 17 to line 201, column 3)",
  " (in 'string', line 182, column 2 to line 201, column 3)",
  " (in 'string', line 204, column 6 to column 41)",
  " (in 'string', line 203, column 22 to line 205, column 5)",
  " (in 'string', line 203, column 4 to line 205, column 5)",
  " (in 'string', line 202, column 16 to line 206, column 3)",
  " (in 'string', line 202, column 2 to line 206, column 3)",
  " (in 'string', line 208, column 4 to column 31)",
  " (in 'string', line 207, column 17 to line 209, column 3)",
  " (in 'string', line 207, column 2 to line 209, column 3)",
  " (in 'string', line 267, column 6 to column 31)",
  " (in 'string', line 266, column 24 to line 268, column 5)",
  " (in 'string', line 266, column 4 to line 268, column 5)",
  " (in 'string', line 265, column 7 to line 269, column 3)",
  " (in 'string', line 221, column 13 to column 17)",
  " (in 'string', line 221, column 18 to column 27)",
  " (in 'string', line 221, column 6 to column 36)",
  " (in 'string', line 222, column 13 to column 20)",
  " (in 'string', line 222, column 6 to column 27)",
  " (in 'string', line 223, column 13 to column 22)",
  " (in 'string', line 223, column 6 to column 33)",
  " (in 'string', line 224, column 13 to column 19)",
  " (in 'string', line 224, column 6 to column 28)",
  " (in 'string', line 226, column 1 to column 33)",
  " (in 'string', line 227, column 1 to column 31)",
  " (in 'string', line 228, column 1 to line 232, column 20)",
  " (in 'string', line 225, column 28 to line 233, column 7)",
  " (in 'string', line 225, column 6 to line 233, column 7)",
  " (in 'string', line 241, column 5 to column 41)",
  " (in 'string', line 242, column 5 to column 65)",
  " (in 'string', line 240, column 11 to line 243, column 4)",
  " (in 'string', line 238, column 5 to column 17)",
  " (in 'string', line 239, column 5 to column 39)",
  " (in 'string', line 237, column 24 to line 240, column 4)",
  " (in 'string', line 237, column 3 to line 243, column 4)",
  " (in 'string', line 236, column 21 to line 244, column 2)",
  " (in 'string', line 236, column 1 to line 244, column 2)",
  " (in 'string', line 246, column 3 to column 49)",
  " (in 'string', line 245, column 21 to line 247, column 2)",
  " (in 'string', line 245, column 1 to line 247, column 2)",
  " (in 'string', line 235, column 22 to line 248, column 7)",
  " (in 'string', line 235, column 6 to line 248, column 7)",
  " (in 'string', line 254, column 3 to column 57)",
  " (in 'string', line 253, column 8 to line 255, column 2)",
  " (in 'string', line 251, column 3 to line 252, column 26)",
  " (in 'string', line 250, column 33 to line 253, column 2)",
  " (in 'string', line 250, column 1 to line 255, column 2)",
  " (in 'string', line 249, column 26 to line 256, column 7)",
  " (in 'string', line 249, column 6 to line 256, column 7)",
  " (in 'string', line 258, column 1 to column 46)",
  " (in 'string', line 257, column 26 to line 259, column 7)",
  " (in 'string', line 257, column 6 to line 259, column 7)",
  " (in 'string', line 261, column 1 to column 36)",
  " (in 'string', line 262, column 1 to column 26)",
  " (in 'string', line 260, column 25 to line 263, column 7)",
  " (in 'string', line 260, column 6 to line 263, column 7)",
  " (in 'string', line 220, column 4 to line 264, column 5)",
  " (in 'string', line 219, column 2 to line 269, column 3)",
  " (in 'string', line 279, column 4 to column 33)",
  " (in 'string', line 281, column 6 to column 24)",
  " (in 'string', line 283, column 1 to column 71)",
  " (in 'string', line 282, column 6 to line 283, column 71)",
  " (in 'string', line 284, column 6 to column 42)",
  " (in 'string', line 280, column 23 to line 285, column 5)",
  " (in 'string', line 280, column 4 to line 285, column 5)",
  " (in 'string', line 287, column 6 to column 36)",
  " (in 'string', line 286, column 19 to line 288, column 5)",
  " (in 'string', line 286, column 4 to line 288, column 5)",
  " (in 'string', line 278, column 19 to line 289, column 3)",
  " (in 'string', line 278, column 2 to line 289, column 3)",
  " (in 'string', line 294, column 4 to column 43)",
  " (in 'string', line 293, column 19 to line 295, column 3)",
  " (in 'string', line 293, column 2 to line 295, column 3)",
  " (in 'string', line 297, column 10 to column 15)",
  " (in 'string', line 297, column 16 to column 17)",
  " (in 'string', line 297, column 4 to column 27)",
  " (in 'string', line 300, column 6 to column 54)",
  " (in 'string', line 299, column 4 to line 300, column 54)",
  " (in 'string', line 303, column 1 to column 28)",
  " (in 'string', line 306, column 5 to column 60)",
  " (in 'string', line 305, column 17 to line 307, column 4)",
  " (in 'string', line 305, column 3 to line 307, column 4)",
  " (in 'string', line 308, column 3 to column 29)",
  " (in 'string', line 304, column 15 to line 309, column 2)",
  " (in 'string', line 304, column 1 to line 309, column 2)",
  " (in 'string', line 302, column 24 to line 310, column 7)",
  " (in 'string', line 302, column 6 to line 310, column 7)",
  " (in 'string', line 301, column 16 to line 311, column 5)",
  " (in 'string', line 301, column 4 to line 311, column 5)",
  " (in 'string', line 312, column 4 to column 38)",
  " (in 'string', line 296, column 21 to line 313, column 3)",
  " (in 'string', line 296, column 2 to line 313, column 3)",
  " (in 'string', line 315, column 11 to column 12)",
  " (in 'string', line 315, column 13 to column 14)",
  " (in 'string', line 315, column 4 to column 21)",
  " (in 'string', line 316, column 4 to column 15)",
  " (in 'string', line 318, column 6 to column 53)",
  " (in 'string', line 319, column 6 to column 44)",
  " (in 'string', line 320, column 6 to column 56)",
  " (in 'string', line 317, column 21 to line 321, column 5)",
  " (in 'string', line 317, column 4 to line 321, column 5)",
  " (in 'string', line 314, column 15 to line 322, column 3)",
  " (in 'string', line 314, column 2 to line 322, column 3)",
  " (in 'string', line 327, column 4 to column 52)",
  " (in 'string', line 326, column 22 to line 328, column 3)",
  " (in 'string', line 326, column 2 to line 328, column 3)",
  " (in 'string', line 330, column 4 to column 57)",
  " (in 'string', line 331, column 4 to column 57)",
  " (in 'string', line 329, column 24 to line 332, column 3)",
  " (in 'string', line 329, column 2 to line 332, column 3)",
  " (in 'string', line 335, column 6 to column 50)",
  " (in 'string', line 334, column 19 to line 336, column 5)",
  " (in 'string', line 334, column 4 to line 336, column 5)",
  " (in 'string', line 333, column 13 to line 337, column 3)",
  " (in 'string', line 333, column 2 to line 337, column 3)",
  " (in 'string', line 340, column 6 to column 49)",
  " (in 'string', line 339, column 23 to line 341, column 5)",
  " (in 'string', line 339, column 4 to line 341, column 5)",
  " (in 'string', line 338, column 17 to line 342, column 3)",
  " (in 'string', line 338, column 2 to line 342, column 3)",
  " (in 'string', line 345, column 6 to column 51)",
  " (in 'string', line 344, column 25 to line 346, column 5)",
  " (in 'string', line 344, column 4 to line 346, column 5)",
  " (in 'string', line 343, column 19 to line 347, column 3)",
  " (in 'string', line 343, column 2 to line 347, column 3)",
  " (in 'string', line 348, column 2 to column 19)",
  " (in 'string', line 93, column 2 to column 17)",
  " (in 'string', line 94, column 2 to column 17)",
  " (in 'string', line 95, column 2 to column 22)",
  " (in 'string', line 96, column 2 to column 22)",
  " (in 'string', line 97, column 2 to column 22)",
  " (in 'string', line 98, column 2 to column 21)",
  " (in 'string', line 100, column 8 to column 14)",
  " (in 'string', line 100, column 2 to column 36)",
  " (in 'string', line 101, column 8 to column 14)",
  " (in 'string', line 101, column 2 to column 32)",
  " (in 'string', line 102, column 8 to column 14)",
  " (in 'string', line 102, column 15 to column 16)",
  " (in 'string', line 102, column 2 to column 50)",
  " (in 'string', line 103, column 8 to column 14)",
  " (in 'string', line 103, column 2 to column 42)",
  " (in 'string', line 104, column 8 to column 14)",
  " (in 'string', line 104, column 2 to column 42)",
  " (in 'string', line 105, column 8 to column 14)",
  " (in 'string', line 105, column 2 to column 42)",
  " (in 'string', line 106, column 8 to column 14)",
  " (in 'string', line 106, column 2 to column 42)",
  " (in 'string', line 107, column 8 to column 13)",
  " (in 'string', line 107, column 2 to column 44)",
  " (in 'string', line 108, column 8 to column 13)",
  " (in 'string', line 108, column 2 to column 44)",
  " (in 'string', line 109, column 8 to column 13)",
  " (in 'string', line 109, column 2 to column 42)",
  " (in 'string', line 110, column 17 to column 18)",
  " (in 'string', line 110, column 2 to column 20)",
  " (in 'string', line 111, column 8 to column 14)",
  " (in 'string', line 111, column 2 to column 29)",
  " (in 'string', line 112, column 8 to column 14)",
  " (in 'string', line 112, column 2 to column 36)",
  " (in 'string', line 113, column 8 to column 9)",
  " (in 'string', line 113, column 2 to column 36)",
  " (in 'string', line 114, column 2 to column 20)",
  " (in 'string', line 115, column 8 to column 9)",
  " (in 'string', line 115, column 2 to column 41)",
  " (in 'string', line 116, column 8 to column 12)",
  " (in 'string', line 116, column 2 to column 36)",
  " (in 'string', line 117, column 2 to column 11)",
  " (in 'string', line 118, column 2 to column 14)",
  " (in 'string', line 119, column 8 to column 15)",
  " (in 'string', line 119, column 2 to column 31)",
  " (in 'string', line 120, column 8 to column 15)",
  " (in 'string', line 120, column 2 to column 38)",
  " (in 'string', line 121, column 2 to column 18)",
  " (in 'string', line 122, column 8 to column 14)",
  " (in 'string', line 122, column 2 to column 36)",
  " (in 'string', line 123, column 8 to column 14)",
  " (in 'string', line 123, column 2 to column 34)",
  " (in 'string', line 124, column 8 to column 14)",
  " (in 'string', line 124, column 2 to column 33)",
  " (in 'string', line 125, column 9 to column 13)",
  " (in 'string', line 125, column 14 to column 16)",
  " (in 'string', line 125, column 2 to column 20)",
  " (in 'string', line 126, column 8 to column 10)",
  " (in 'string', line 126, column 2 to column 27)",
  " (in 'string', line 127, column 8 to column 10)",
  " (in 'string', line 127, column 2 to column 34)",
  " (in 'string', line 129, column 2 to column 20)",
  " (in 'string', line 130, column 8 to column 12)",
  " (in 'string', line 130, column 2 to column 32)",
  " (in 'string', line 131, column 8 to column 12)",
  " (in 'string', line 131, column 2 to column 32)",
  " (in 'string', line 132, column 8 to column 12)",
  " (in 'string', line 132, column 2 to column 36)",
  " (in 'string', line 133, column 8 to column 12)",
  " (in 'string', line 133, column 2 to column 36)",
  " (in 'string', line 134, column 8 to column 12)",
  " (in 'string', line 134, column 2 to column 47)",
  " (in 'string', line 136, column 2 to column 16)",
  " (in 'string', line 137, column 8 to column 15)",
  " (in 'string', line 137, column 2 to column 42)",
  " (in 'string', line 138, column 2 to column 22)",
  " (in 'string', line 139, column 9 to column 15)",
  " (in 'string', line 139, column 2 to column 28)",
  " (in 'string', line 140, column 9 to column 15)",
  " (in 'string', line 140, column 16 to column 20)",
  " (in 'string', line 140, column 2 to column 33)",
  " (in 'string', line 141, column 9 to column 15)",
  " (in 'string', line 141, column 16 to column 20)",
  " (in 'string', line 141, column 2 to column 33)",
  " (in 'string', line 142, column 8 to column 17)",
  " (in 'string', line 142, column 2 to column 48)",
  " (in 'string', line 143, column 9 to column 18)",
  " (in 'string', line 143, column 2 to column 33)",
  " (in 'string', line 144, column 18 to column 27)",
  " (in 'string', line 144, column 2 to column 40)",
  " (in 'string', line 145, column 9 to column 18)",
  " (in 'string', line 145, column 2 to column 33)",
  " (in 'string', line 146, column 18 to column 27)",
  " (in 'string', line 146, column 2 to column 40)",
  " (in 'string', line 147, column 2 to column 30)",
  " (in 'string', line 150, column 2 to column 23)",
  " (in 'string', line 151, column 8 to column 15)",
  " (in 'string', line 151, column 2 to column 48)",
  " (in 'string', line 152, column 8 to column 15)",
  " (in 'string', line 152, column 2 to column 41)",
  " (in 'string', line 153, column 8 to column 15)",
  " (in 'string', line 153, column 2 to column 36)",
  " (in 'string', line 154, column 2 to column 14)",
  " (in 'string', line 155, column 8 to column 15)",
  " (in 'string', line 155, column 2 to column 55)",
  " (in 'string', line 156, column 8 to column 15)",
  " (in 'string', line 156, column 2 to column 55)",
  " (in 'string', line 157, column 8 to column 15)",
  " (in 'string', line 157, column 2 to column 54)",
  " (in 'string', line 158, column 8 to column 15)",
  " (in 'string', line 158, column 2 to column 56)",
  " (in 'string', line 159, column 8 to column 15)",
  " (in 'string', line 159, column 2 to column 31)",
  " (in 'string', line 160, column 2 to column 24)",
  " (in 'string', line 161, column 9 to column 17)",
  " (in 'string', line 161, column 2 to column 27)",
  " (in 'string', line 162, column 18 to column 26)",
  " (in 'string', line 162, column 2 to column 34)",
  " (in 'string', line 165, column 9 to column 16)",
  " (in 'string', line 167, column 9 to column 18)",
  " (in 'string', line 168, column 9 to column 18)",
  " (in 'string', line 169, column 8 to column 14)",
  " (in 'string', line 170, column 9 to column 11)",
  " (in 'string', line 171, column 9 to column 17)",
  " (in 'string', line 178, column 8 to column 9)",
  " (in 'string', line 178, column 18 to column 19)",
  " (in 'string', line 179, column 8 to column 14)",
  " (in 'string', line 211, column 9 to column 18)",
  " (in 'string', line 212, column 9 to column 18)",
  " (in 'string', line 214, column 9 to column 16)",
  " (in 'string', line 216, column 9 to column 15)",
  " (in 'string', line 272, column 8 to column 12)",
  " (in 'string', line 272, column 21 to column 22)",
  " (in 'string', line 272, column 23 to column 24)",
  " (in 'string', line 275, column 9 to column 15)",
  " (in 'string', line 276, column 8 to column 12)",
  " (in 'string', line 276, column 21 to column 22)",
  " (in 'string', line 276, column 23 to column 24)",
  " (in 'string', line 291, column 8 to column 9)",
  " (in 'string', line 9, column 11 to column 18)",
  " (in 'string', line 9, column 4 to column 28)",
  " (in 'string', line 14, column 1 to column 93)",
  " (in 'string', line 12, column 1 to column 92)",
  " (in 'string', line 11, column 6 to line 14, column 93)",
  " (in 'string', line 10, column 24 to line 15, column 5)",
  " (in 'string', line 10, column 4 to line 15, column 5)",
  " (in 'string', line 16, column 11 to column 18)",
  " (in 'string', line 16, column 4 to column 71)",
  " (in 'string', line 17, column 4 to column 17)",
  " (in 'string', line 8, column 9 to line 18, column 3)",
  " (in 'string', line 21, column 11 to column 18)",
  " (in 'string', line 21, column 4 to column 24)",
  " (in 'string', line 22, column 4 to column 35)",
  " (in 'string', line 23, column 4 to column 28)",
  " (in 'string', line 24, column 11 to column 19)",
  " (in 'string', line 24, column 4 to column 49)",
  " (in 'string', line 25, column 11 to column 19)",
  " (in 'string', line 25, column 4 to column 69)",
  " (in 'string', line 26, column 11 to column 17)",
  " (in 'string', line 26, column 4 to column 79)",
  " (in 'string', line 27, column 11 to column 19)",
  " (in 'string', line 27, column 4 to column 55)",
  " (in 'string', line 28, column 11 to column 19)",
  " (in 'string', line 28, column 4 to column 66)",
  " (in 'string', line 29, column 4 to column 35)",
  " (in 'string', line 30, column 11 to column 17)",
  " (in 'string', line 30, column 4 to column 67)",
  " (in 'string', line 31, column 11 to column 19)",
  " (in 'string', line 31, column 4 to column 58)",
  " (in 'string', line 32, column 4 to column 35)",
  " (in 'string', line 33, column 4 to column 15)",
  " (in 'string', line 20, column 17 to line 34, column 3)",
  " (in 'string', line 39, column 4 to column 13)",
  " (in 'string', line 45, column 6 to column 34)",
  " (in 'string', line 46, column 6 to column 32)",
  " (in 'string', line 47, column 6 to column 32)",
  " (in 'string', line 48, column 6 to column 43)",
  " (in 'string', line 44, column 9 to line 49, column 5)",
  " (in 'string', line 43, column 6 to column 25)",
  " (in 'string', line 42, column 9 to line 49, column 5)",
  " (in 'string', line 41, column 6 to column 18)",
  " (in 'string', line 40, column 4 to line 49, column 5)",
  " (in 'string', line 50, column 4 to column 15)",
  " (in 'string', line 38, column 27 to line 51, column 3)",
  " (in 'string', line 55, column 4 to column 13)",
  " (in 'string', line 61, column 6 to column 34)",
  " (in 'string', line 62, column 6 to column 31)",
  " (in 'string', line 63, column 6 to column 29)",
  " (in 'string', line 64, column 6 to column 22)",
  " (in 'string', line 65, column 6 to column 31)",
  " (in 'string', line 66, column 6 to column 25)",
  " (in 'string', line 67, column 6 to column 22)",
  " (in 'string', line 68, column 6 to column 24)",
  " (in 'string', line 69, column 6 to column 23)",
  " (in 'string', line 70, column 6 to column 64)",
  " (in 'string', line 60, column 9 to line 71, column 5)",
  " (in 'string', line 59, column 6 to column 25)",
  " (in 'string', line 58, column 9 to line 71, column 5)",
  " (in 'string', line 57, column 6 to column 18)",
  " (in 'string', line 56, column 4 to line 71, column 5)",
  " (in 'string', line 72, column 4 to column 15)",
  " (in 'string', line 54, column 28 to line 73, column 3)",
  " (in 'string', line 77, column 4 to column 12)",
  " (in 'string', line 78, column 4 to column 10)",
  " (in 'string', line 82, column 6 to column 12)",
  " (in 'string', line 84, column 1 to column 9)",
  " (in 'string', line 83, column 46 to line 85, column 7)",
  " (in 'string', line 83, column 6 to line 85, column 7)",
  " (in 'string', line 86, column 6 to column 16)",
  " (in 'string', line 81, column 9 to line 87, column 5)",
  " (in 'string', line 80, column 32 to column 47)",
  " (in 'string', line 80, column 9 to line 87, column 5)",
  " (in 'string', line 79, column 19 to column 27)",
  " (in 'string', line 79, column 4 to line 87, column 5)",
  " (in 'string', line 88, column 4 to column 15)",
  " (in 'string', line 76, column 37 to line 89, column 3)"};
template <typename T0__, typename T1__, typename T3__, typename T4__,
          typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>>,-1,1>
shapescale_to_rates(const T0__& shape, const T1__& scale, const int& nprates,
                    const T3__& train_data_x_arg__, const T4__&
                    train_data_y_arg__, const T5__& train_data_m_arg__,
                    const int& spline, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
canpars_to_rates(const T0__& canpars_arg__, const int& nprates, std::ostream*
                 pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
  stan::base_type_t<T3__>>
spline_interp_linear(const T0__& x, const T1__& x0_arg__, const T2__&
                     y0_arg__, const T3__& m_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
  stan::base_type_t<T3__>>
spline_interp_hermite(const T0__& x, const T1__& x0_arg__, const T2__&
                      y0_arg__, const T3__& m_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
int
findinterval(const T0__& x, const T1__& x0_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T3__, typename T4__,
          typename T5__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>>,-1,1>
shapescale_to_rates(const T0__& shape, const T1__& scale, const int& nprates,
                    const T3__& train_data_x_arg__, const T4__&
                    train_data_y_arg__, const T5__& train_data_m_arg__,
                    const int& spline, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>>;
  int current_statement__ = 0;
  const auto& train_data_x = stan::math::to_ref(train_data_x_arg__);
  const auto& train_data_y = stan::math::to_ref(train_data_y_arg__);
  const auto& train_data_m = stan::math::to_ref(train_data_m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 302;
    stan::math::validate_non_negative_index("canpars", "nprates", nprates);
    Eigen::Matrix<local_scalar_t__,-1,1> canpars =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nprates, DUMMY_VAR__);
    current_statement__ = 308;
    for (int i = 1; i <= nprates; ++i) {
      current_statement__ = 306;
      if (stan::math::logical_eq(spline, 1)) {
        current_statement__ = 305;
        stan::model::assign(canpars,
          spline_interp_linear(shape, train_data_x,
            stan::model::rvalue(train_data_y, "train_data_y",
              stan::model::index_omni(), stan::model::index_uni(i)),
            stan::model::rvalue(train_data_m, "train_data_m",
              stan::model::index_omni(), stan::model::index_uni(i)),
            pstream__), "assigning variable canpars",
          stan::model::index_uni(i));
      } else {
        current_statement__ = 304;
        stan::model::assign(canpars,
          spline_interp_hermite(shape, train_data_x,
            stan::model::rvalue(train_data_y, "train_data_y",
              stan::model::index_omni(), stan::model::index_uni(i)),
            stan::model::rvalue(train_data_m, "train_data_m",
              stan::model::index_omni(), stan::model::index_uni(i)),
            pstream__), "assigning variable canpars",
          stan::model::index_uni(i));
      }
    }
    current_statement__ = 309;
    stan::math::validate_non_negative_index("rates", "nprates", nprates);
    Eigen::Matrix<local_scalar_t__,-1,1> rates =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nprates, DUMMY_VAR__);
    current_statement__ = 310;
    stan::model::assign(rates,
      stan::math::divide(canpars_to_rates(canpars, nprates, pstream__), scale),
      "assigning variable rates");
    current_statement__ = 311;
    return rates;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
canpars_to_rates(const T0__& canpars_arg__, const int& nprates, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& canpars = stan::math::to_ref(canpars_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 313;
    stan::math::validate_non_negative_index("ret", "nprates", nprates);
    Eigen::Matrix<local_scalar_t__,-1,1> ret =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nprates, DUMMY_VAR__);
    int nphase = std::numeric_limits<int>::min();
    current_statement__ = 315;
    nphase = ((nprates + 1) / 2);
    local_scalar_t__ qsoj1 = DUMMY_VAR__;
    current_statement__ = 316;
    qsoj1 = stan::model::rvalue(canpars, "canpars", stan::model::index_uni(1));
    current_statement__ = 317;
    stan::math::validate_non_negative_index("incqsoj", "nphase - 1", (nphase
      - 1));
    Eigen::Matrix<local_scalar_t__,-1,1> incqsoj =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nphase - 1),
        DUMMY_VAR__);
    current_statement__ = 318;
    stan::model::assign(incqsoj,
      stan::model::rvalue(canpars, "canpars",
        stan::model::index_min_max(2, nphase)), "assigning variable incqsoj");
    current_statement__ = 319;
    stan::math::validate_non_negative_index("pabs_notlast", "nphase - 1",
      (nphase - 1));
    Eigen::Matrix<local_scalar_t__,-1,1> pabs_notlast =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nphase - 1),
        DUMMY_VAR__);
    current_statement__ = 320;
    stan::model::assign(pabs_notlast,
      stan::model::rvalue(canpars, "canpars",
        stan::model::index_min_max((nphase + 1), ((2 * nphase) - 1))),
      "assigning variable pabs_notlast");
    current_statement__ = 321;
    stan::math::validate_non_negative_index("qsoj", "nphase", nphase);
    Eigen::Matrix<local_scalar_t__,-1,1> qsoj =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nphase, DUMMY_VAR__);
    current_statement__ = 322;
    stan::model::assign(qsoj,
      stan::math::append_row(qsoj1,
        stan::math::add(qsoj1, stan::math::cumulative_sum(incqsoj))),
      "assigning variable qsoj");
    current_statement__ = 323;
    stan::math::validate_non_negative_index("qsoj_notlast", "nphase - 1",
      (nphase - 1));
    Eigen::Matrix<local_scalar_t__,-1,1> qsoj_notlast =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nphase - 1),
        DUMMY_VAR__);
    current_statement__ = 324;
    stan::model::assign(qsoj_notlast,
      stan::model::rvalue(qsoj, "qsoj",
        stan::model::index_min_max(1, (nphase - 1))),
      "assigning variable qsoj_notlast");
    current_statement__ = 325;
    stan::math::validate_non_negative_index("arate_notlast", "nphase - 1",
      (nphase - 1));
    Eigen::Matrix<local_scalar_t__,-1,1> arate_notlast =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nphase - 1),
        DUMMY_VAR__);
    current_statement__ = 326;
    stan::model::assign(arate_notlast,
      stan::math::elt_multiply(qsoj_notlast, pabs_notlast),
      "assigning variable arate_notlast");
    local_scalar_t__ arate_last = DUMMY_VAR__;
    current_statement__ = 327;
    arate_last = stan::model::rvalue(qsoj, "qsoj",
                   stan::model::index_uni(nphase));
    current_statement__ = 328;
    stan::math::validate_non_negative_index("arate", "nphase", nphase);
    Eigen::Matrix<local_scalar_t__,-1,1> arate =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nphase, DUMMY_VAR__);
    current_statement__ = 329;
    stan::model::assign(arate,
      stan::math::append_row(arate_notlast, arate_last),
      "assigning variable arate");
    current_statement__ = 330;
    stan::math::validate_non_negative_index("prate", "nphase - 1", (nphase -
      1));
    Eigen::Matrix<local_scalar_t__,-1,1> prate =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nphase - 1),
        DUMMY_VAR__);
    current_statement__ = 331;
    stan::model::assign(prate,
      stan::math::subtract(qsoj_notlast, arate_notlast),
      "assigning variable prate");
    current_statement__ = 332;
    stan::model::assign(ret, stan::math::append_row(prate, arate),
      "assigning variable ret");
    current_statement__ = 333;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
  stan::base_type_t<T3__>>
spline_interp_linear(const T0__& x, const T1__& x0_arg__, const T2__&
                     y0_arg__, const T3__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& x0 = stan::math::to_ref(x0_arg__);
  const auto& y0 = stan::math::to_ref(y0_arg__);
  const auto& m = stan::math::to_ref(m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ ret = DUMMY_VAR__;
    current_statement__ = 344;
    if (stan::math::logical_lt(x,
          stan::model::rvalue(x0, "x0", stan::model::index_uni(1)))) {
      current_statement__ = 343;
      ret = stan::model::rvalue(y0, "y0", stan::model::index_uni(1));
    } else {
      current_statement__ = 342;
      if (stan::math::logical_gt(x,
            stan::model::rvalue(x0, "x0",
              stan::model::index_uni(stan::math::rows(x0))))) {
        current_statement__ = 341;
        ret = stan::model::rvalue(y0, "y0",
                stan::model::index_uni(stan::math::rows(x0)));
      } else {
        int i = std::numeric_limits<int>::min();
        current_statement__ = 336;
        i = findinterval(x, x0, pstream__);
        local_scalar_t__ dx = DUMMY_VAR__;
        current_statement__ = 337;
        dx = (stan::model::rvalue(x0, "x0", stan::model::index_uni((i + 1)))
          - stan::model::rvalue(x0, "x0", stan::model::index_uni(i)));
        local_scalar_t__ dy = DUMMY_VAR__;
        current_statement__ = 338;
        dy = (stan::model::rvalue(y0, "y0", stan::model::index_uni((i + 1)))
          - stan::model::rvalue(y0, "y0", stan::model::index_uni(i)));
        current_statement__ = 339;
        ret = (stan::model::rvalue(y0, "y0", stan::model::index_uni(i)) +
          (((x - stan::model::rvalue(x0, "x0", stan::model::index_uni(i))) *
          dy) / dx));
      }
    }
    current_statement__ = 345;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
  stan::base_type_t<T3__>>
spline_interp_hermite(const T0__& x, const T1__& x0_arg__, const T2__&
                      y0_arg__, const T3__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& x0 = stan::math::to_ref(x0_arg__);
  const auto& y0 = stan::math::to_ref(y0_arg__);
  const auto& m = stan::math::to_ref(m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ ret = DUMMY_VAR__;
    current_statement__ = 362;
    if (stan::math::logical_lt(x,
          stan::model::rvalue(x0, "x0", stan::model::index_uni(1)))) {
      current_statement__ = 361;
      ret = stan::model::rvalue(y0, "y0", stan::model::index_uni(1));
    } else {
      current_statement__ = 360;
      if (stan::math::logical_gt(x,
            stan::model::rvalue(x0, "x0",
              stan::model::index_uni(stan::math::rows(x0))))) {
        current_statement__ = 359;
        ret = stan::model::rvalue(y0, "y0",
                stan::model::index_uni(stan::math::rows(x0)));
      } else {
        int i = std::numeric_limits<int>::min();
        current_statement__ = 348;
        i = findinterval(x, x0, pstream__);
        local_scalar_t__ h = DUMMY_VAR__;
        current_statement__ = 349;
        h = (stan::model::rvalue(x0, "x0", stan::model::index_uni((i + 1))) -
          stan::model::rvalue(x0, "x0", stan::model::index_uni(i)));
        local_scalar_t__ t = DUMMY_VAR__;
        current_statement__ = 350;
        t = ((x - stan::model::rvalue(x0, "x0", stan::model::index_uni(i))) /
          h);
        local_scalar_t__ t1 = DUMMY_VAR__;
        current_statement__ = 351;
        t1 = (t - 1);
        local_scalar_t__ h01 = DUMMY_VAR__;
        current_statement__ = 352;
        h01 = ((t * t) * (3 - (2 * t)));
        local_scalar_t__ h00 = DUMMY_VAR__;
        current_statement__ = 353;
        h00 = (1 - h01);
        local_scalar_t__ tt1 = DUMMY_VAR__;
        current_statement__ = 354;
        tt1 = (t * t1);
        local_scalar_t__ h10 = DUMMY_VAR__;
        current_statement__ = 355;
        h10 = (tt1 * t1);
        local_scalar_t__ h11 = DUMMY_VAR__;
        current_statement__ = 356;
        h11 = (tt1 * t);
        current_statement__ = 357;
        ret = ((((stan::model::rvalue(y0, "y0", stan::model::index_uni(i)) *
          h00) + ((h *
          stan::model::rvalue(m, "m", stan::model::index_uni(i))) * h10)) +
          (stan::model::rvalue(y0, "y0", stan::model::index_uni((i + 1))) *
          h01)) + ((h *
          stan::model::rvalue(m, "m", stan::model::index_uni((i + 1)))) *
          h11));
      }
    }
    current_statement__ = 363;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
int
findinterval(const T0__& x, const T1__& x0_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& x0 = stan::math::to_ref(x0_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ret = std::numeric_limits<int>::min();
    int i = std::numeric_limits<int>::min();
    current_statement__ = 376;
    if (stan::math::logical_lt(x,
          stan::model::rvalue(x0, "x0", stan::model::index_uni(1)))) {
      current_statement__ = 375;
      ret = 0;
    } else {
      current_statement__ = 374;
      if (stan::math::logical_gte(x,
            stan::model::rvalue(x0, "x0",
              stan::model::index_uni(stan::math::rows(x0))))) {
        current_statement__ = 373;
        ret = stan::math::rows(x0);
      } else {
        current_statement__ = 367;
        i = 1;
        current_statement__ = 370;
        while ((stan::math::primitive_value(
                  stan::math::logical_lte(i, stan::math::rows(x0)))
               &&
               stan::math::primitive_value(
                 stan::math::logical_gte(x,
                   stan::model::rvalue(x0, "x0", stan::model::index_uni(i)))))) {
          current_statement__ = 368;
          i = (i + 1);
        }
        current_statement__ = 371;
        ret = (i - 1);
      }
    }
    current_statement__ = 377;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_hmm final : public model_base_crtp<model_hmm> {
private:
  int K;
  int T;
  int nqpars;
  int nepars;
  int nindiv;
  int nefix;
  std::vector<int> starti;
  std::vector<int> TI;
  std::vector<std::vector<double>> initprobs;
  std::vector<int> qrow;
  std::vector<int> qcol;
  std::vector<int> erow;
  std::vector<int> ecol;
  std::vector<int> efixrow;
  std::vector<int> efixcol;
  std::vector<double> efix;
  std::vector<double> sumefixed;
  std::vector<double> loemean;
  std::vector<double> loesd;
  std::vector<int> obs;
  int ntlc;
  std::vector<int> tlcid;
  std::vector<double> timelag;
  int npaq;
  int npriorq;
  std::vector<double> logqmean;
  std::vector<double> logqsd;
  int nx;
  std::vector<int> xstart;
  std::vector<int> xend;
  std::vector<int> nxq;
  Eigen::Matrix<double,-1,-1> X_data__;
  std::vector<double> loghrmean;
  std::vector<double> loghrsd;
  int nsoj;
  std::vector<int> sojy;
  std::vector<int> sojn;
  std::vector<int> sojstate;
  std::vector<double> sojtime;
  std::vector<int> sojtlcid;
  int npastates;
  std::vector<int> priorq_inds;
  int ntrain;
  Eigen::Matrix<double,-1,1> traindat_x_data__;
  Eigen::Matrix<double,-1,-1> traindat_y_data__;
  Eigen::Matrix<double,-1,-1> traindat_m_data__;
  std::vector<std::vector<int>> traindat_inds;
  Eigen::Matrix<double,-1,1> logshapemean_data__;
  Eigen::Matrix<double,-1,1> logshapesd_data__;
  Eigen::Matrix<double,-1,1> logscalemean_data__;
  Eigen::Matrix<double,-1,1> logscalesd_data__;
  int spline;
  int npadest;
  std::vector<int> dest_base;
  std::vector<int> dest_state;
  std::vector<int> loind;
  int npaqall;
  std::vector<int> paq_inds;
  std::vector<int> praterow;
  std::vector<int> pastate;
  std::vector<int> prate_abs;
  std::vector<int> dest_inds;
  int noddsabs;
  Eigen::Matrix<double,-1,1> loamean_data__;
  Eigen::Matrix<double,-1,1> loasd_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> traindat_x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> traindat_y{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> traindat_m{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> logshapemean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> logshapesd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> logscalemean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> logscalesd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> loamean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> loasd{nullptr, 0};
public:
  ~model_hmm() {}
  model_hmm(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_hmm_namespace::model_hmm";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 164;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 164;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 164;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 165;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 165;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 165;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 166;
      context__.validate_dims("data initialization", "nqpars", "int",
        std::vector<size_t>{});
      nqpars = std::numeric_limits<int>::min();
      current_statement__ = 166;
      nqpars = context__.vals_i("nqpars")[(1 - 1)];
      current_statement__ = 166;
      stan::math::check_greater_or_equal(function__, "nqpars", nqpars, 0);
      current_statement__ = 167;
      context__.validate_dims("data initialization", "nepars", "int",
        std::vector<size_t>{});
      nepars = std::numeric_limits<int>::min();
      current_statement__ = 167;
      nepars = context__.vals_i("nepars")[(1 - 1)];
      current_statement__ = 167;
      stan::math::check_greater_or_equal(function__, "nepars", nepars, 0);
      current_statement__ = 168;
      context__.validate_dims("data initialization", "nindiv", "int",
        std::vector<size_t>{});
      nindiv = std::numeric_limits<int>::min();
      current_statement__ = 168;
      nindiv = context__.vals_i("nindiv")[(1 - 1)];
      current_statement__ = 168;
      stan::math::check_greater_or_equal(function__, "nindiv", nindiv, 1);
      current_statement__ = 169;
      context__.validate_dims("data initialization", "nefix", "int",
        std::vector<size_t>{});
      nefix = std::numeric_limits<int>::min();
      current_statement__ = 169;
      nefix = context__.vals_i("nefix")[(1 - 1)];
      current_statement__ = 169;
      stan::math::check_greater_or_equal(function__, "nefix", nefix, 0);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("starti", "nindiv", nindiv);
      current_statement__ = 171;
      context__.validate_dims("data initialization", "starti", "int",
        std::vector<size_t>{static_cast<size_t>(nindiv)});
      starti = std::vector<int>(nindiv, std::numeric_limits<int>::min());
      current_statement__ = 171;
      starti = context__.vals_i("starti");
      current_statement__ = 171;
      stan::math::check_greater_or_equal(function__, "starti", starti, 1);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("TI", "nindiv", nindiv);
      current_statement__ = 173;
      context__.validate_dims("data initialization", "TI", "int",
        std::vector<size_t>{static_cast<size_t>(nindiv)});
      TI = std::vector<int>(nindiv, std::numeric_limits<int>::min());
      current_statement__ = 173;
      TI = context__.vals_i("TI");
      current_statement__ = 173;
      stan::math::check_greater_or_equal(function__, "TI", TI, 1);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("initprobs", "nindiv", nindiv);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("initprobs", "K", K);
      current_statement__ = 176;
      context__.validate_dims("data initialization", "initprobs", "double",
        std::vector<size_t>{static_cast<size_t>(nindiv),
          static_cast<size_t>(K)});
      initprobs = std::vector<std::vector<double>>(nindiv,
                    std::vector<double>(K,
                      std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> initprobs_flat__;
        current_statement__ = 176;
        initprobs_flat__ = context__.vals_r("initprobs");
        current_statement__ = 176;
        pos__ = 1;
        current_statement__ = 176;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 176;
          for (int sym2__ = 1; sym2__ <= nindiv; ++sym2__) {
            current_statement__ = 176;
            stan::model::assign(initprobs, initprobs_flat__[(pos__ - 1)],
              "assigning variable initprobs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 176;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 176;
      stan::math::check_greater_or_equal(function__, "initprobs", initprobs,
        0);
      current_statement__ = 176;
      stan::math::check_less_or_equal(function__, "initprobs", initprobs, 1);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("qrow", "nqpars", nqpars);
      current_statement__ = 178;
      context__.validate_dims("data initialization", "qrow", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      qrow = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 178;
      qrow = context__.vals_i("qrow");
      current_statement__ = 178;
      stan::math::check_greater_or_equal(function__, "qrow", qrow, 1);
      current_statement__ = 178;
      stan::math::check_less_or_equal(function__, "qrow", qrow, K);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("qcol", "nqpars", nqpars);
      current_statement__ = 180;
      context__.validate_dims("data initialization", "qcol", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      qcol = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 180;
      qcol = context__.vals_i("qcol");
      current_statement__ = 180;
      stan::math::check_greater_or_equal(function__, "qcol", qcol, 1);
      current_statement__ = 180;
      stan::math::check_less_or_equal(function__, "qcol", qcol, K);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("erow", "nepars", nepars);
      current_statement__ = 182;
      context__.validate_dims("data initialization", "erow", "int",
        std::vector<size_t>{static_cast<size_t>(nepars)});
      erow = std::vector<int>(nepars, std::numeric_limits<int>::min());
      current_statement__ = 182;
      erow = context__.vals_i("erow");
      current_statement__ = 182;
      stan::math::check_greater_or_equal(function__, "erow", erow, 1);
      current_statement__ = 182;
      stan::math::check_less_or_equal(function__, "erow", erow, K);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("ecol", "nepars", nepars);
      current_statement__ = 184;
      context__.validate_dims("data initialization", "ecol", "int",
        std::vector<size_t>{static_cast<size_t>(nepars)});
      ecol = std::vector<int>(nepars, std::numeric_limits<int>::min());
      current_statement__ = 184;
      ecol = context__.vals_i("ecol");
      current_statement__ = 184;
      stan::math::check_greater_or_equal(function__, "ecol", ecol, 1);
      current_statement__ = 184;
      stan::math::check_less_or_equal(function__, "ecol", ecol, K);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("efixrow", "nefix", nefix);
      current_statement__ = 186;
      context__.validate_dims("data initialization", "efixrow", "int",
        std::vector<size_t>{static_cast<size_t>(nefix)});
      efixrow = std::vector<int>(nefix, std::numeric_limits<int>::min());
      current_statement__ = 186;
      efixrow = context__.vals_i("efixrow");
      current_statement__ = 186;
      stan::math::check_greater_or_equal(function__, "efixrow", efixrow, 1);
      current_statement__ = 186;
      stan::math::check_less_or_equal(function__, "efixrow", efixrow, K);
      current_statement__ = 187;
      stan::math::validate_non_negative_index("efixcol", "nefix", nefix);
      current_statement__ = 188;
      context__.validate_dims("data initialization", "efixcol", "int",
        std::vector<size_t>{static_cast<size_t>(nefix)});
      efixcol = std::vector<int>(nefix, std::numeric_limits<int>::min());
      current_statement__ = 188;
      efixcol = context__.vals_i("efixcol");
      current_statement__ = 188;
      stan::math::check_greater_or_equal(function__, "efixcol", efixcol, 1);
      current_statement__ = 188;
      stan::math::check_less_or_equal(function__, "efixcol", efixcol, K);
      current_statement__ = 189;
      stan::math::validate_non_negative_index("efix", "nefix", nefix);
      current_statement__ = 190;
      context__.validate_dims("data initialization", "efix", "double",
        std::vector<size_t>{static_cast<size_t>(nefix)});
      efix = std::vector<double>(nefix,
               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 190;
      efix = context__.vals_r("efix");
      current_statement__ = 190;
      stan::math::check_greater_or_equal(function__, "efix", efix, 0);
      current_statement__ = 190;
      stan::math::check_less_or_equal(function__, "efix", efix, 1);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("sumefixed", "K", K);
      current_statement__ = 192;
      context__.validate_dims("data initialization", "sumefixed", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      sumefixed = std::vector<double>(K,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 192;
      sumefixed = context__.vals_r("sumefixed");
      current_statement__ = 193;
      stan::math::validate_non_negative_index("loemean", "nepars", nepars);
      current_statement__ = 194;
      context__.validate_dims("data initialization", "loemean", "double",
        std::vector<size_t>{static_cast<size_t>(nepars)});
      loemean = std::vector<double>(nepars,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 194;
      loemean = context__.vals_r("loemean");
      current_statement__ = 195;
      stan::math::validate_non_negative_index("loesd", "nepars", nepars);
      current_statement__ = 196;
      context__.validate_dims("data initialization", "loesd", "double",
        std::vector<size_t>{static_cast<size_t>(nepars)});
      loesd = std::vector<double>(nepars,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 196;
      loesd = context__.vals_r("loesd");
      current_statement__ = 196;
      stan::math::check_greater_or_equal(function__, "loesd", loesd, 0);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("obs", "T", T);
      current_statement__ = 198;
      context__.validate_dims("data initialization", "obs", "int",
        std::vector<size_t>{static_cast<size_t>(T)});
      obs = std::vector<int>(T, std::numeric_limits<int>::min());
      current_statement__ = 198;
      obs = context__.vals_i("obs");
      current_statement__ = 198;
      stan::math::check_greater_or_equal(function__, "obs", obs, 1);
      current_statement__ = 198;
      stan::math::check_less_or_equal(function__, "obs", obs, K);
      current_statement__ = 199;
      context__.validate_dims("data initialization", "ntlc", "int",
        std::vector<size_t>{});
      ntlc = std::numeric_limits<int>::min();
      current_statement__ = 199;
      ntlc = context__.vals_i("ntlc")[(1 - 1)];
      current_statement__ = 199;
      stan::math::check_greater_or_equal(function__, "ntlc", ntlc, 1);
      current_statement__ = 200;
      stan::math::validate_non_negative_index("tlcid", "T", T);
      current_statement__ = 201;
      context__.validate_dims("data initialization", "tlcid", "int",
        std::vector<size_t>{static_cast<size_t>(T)});
      tlcid = std::vector<int>(T, std::numeric_limits<int>::min());
      current_statement__ = 201;
      tlcid = context__.vals_i("tlcid");
      current_statement__ = 201;
      stan::math::check_greater_or_equal(function__, "tlcid", tlcid, 0);
      current_statement__ = 201;
      stan::math::check_less_or_equal(function__, "tlcid", tlcid, ntlc);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("timelag", "ntlc", ntlc);
      current_statement__ = 203;
      context__.validate_dims("data initialization", "timelag", "double",
        std::vector<size_t>{static_cast<size_t>(ntlc)});
      timelag = std::vector<double>(ntlc,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 203;
      timelag = context__.vals_r("timelag");
      current_statement__ = 203;
      stan::math::check_greater_or_equal(function__, "timelag", timelag, 0);
      current_statement__ = 204;
      context__.validate_dims("data initialization", "npaq", "int",
        std::vector<size_t>{});
      npaq = std::numeric_limits<int>::min();
      current_statement__ = 204;
      npaq = context__.vals_i("npaq")[(1 - 1)];
      current_statement__ = 205;
      context__.validate_dims("data initialization", "npriorq", "int",
        std::vector<size_t>{});
      npriorq = std::numeric_limits<int>::min();
      current_statement__ = 205;
      npriorq = context__.vals_i("npriorq")[(1 - 1)];
      current_statement__ = 206;
      stan::math::validate_non_negative_index("logqmean", "npriorq", npriorq);
      current_statement__ = 207;
      context__.validate_dims("data initialization", "logqmean", "double",
        std::vector<size_t>{static_cast<size_t>(npriorq)});
      logqmean = std::vector<double>(npriorq,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 207;
      logqmean = context__.vals_r("logqmean");
      current_statement__ = 208;
      stan::math::validate_non_negative_index("logqsd", "npriorq", npriorq);
      current_statement__ = 209;
      context__.validate_dims("data initialization", "logqsd", "double",
        std::vector<size_t>{static_cast<size_t>(npriorq)});
      logqsd = std::vector<double>(npriorq,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 209;
      logqsd = context__.vals_r("logqsd");
      current_statement__ = 209;
      stan::math::check_greater_or_equal(function__, "logqsd", logqsd, 0);
      current_statement__ = 210;
      context__.validate_dims("data initialization", "nx", "int",
        std::vector<size_t>{});
      nx = std::numeric_limits<int>::min();
      current_statement__ = 210;
      nx = context__.vals_i("nx")[(1 - 1)];
      current_statement__ = 210;
      stan::math::check_greater_or_equal(function__, "nx", nx, 0);
      current_statement__ = 211;
      stan::math::validate_non_negative_index("xstart", "nqpars", nqpars);
      current_statement__ = 212;
      context__.validate_dims("data initialization", "xstart", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      xstart = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 212;
      xstart = context__.vals_i("xstart");
      current_statement__ = 212;
      stan::math::check_greater_or_equal(function__, "xstart", xstart, 0);
      current_statement__ = 213;
      stan::math::validate_non_negative_index("xend", "nqpars", nqpars);
      current_statement__ = 214;
      context__.validate_dims("data initialization", "xend", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      xend = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 214;
      xend = context__.vals_i("xend");
      current_statement__ = 214;
      stan::math::check_greater_or_equal(function__, "xend", xend, 0);
      current_statement__ = 215;
      stan::math::validate_non_negative_index("nxq", "nqpars", nqpars);
      current_statement__ = 216;
      context__.validate_dims("data initialization", "nxq", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      nxq = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 216;
      nxq = context__.vals_i("nxq");
      current_statement__ = 216;
      stan::math::check_greater_or_equal(function__, "nxq", nxq, 0);
      current_statement__ = 217;
      stan::math::validate_non_negative_index("X", "ntlc", ntlc);
      current_statement__ = 218;
      stan::math::validate_non_negative_index("X", "nx", nx);
      current_statement__ = 219;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(ntlc),
          static_cast<size_t>(nx)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(ntlc, nx,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), ntlc,
        nx);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 219;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 219;
        pos__ = 1;
        current_statement__ = 219;
        for (int sym1__ = 1; sym1__ <= nx; ++sym1__) {
          current_statement__ = 219;
          for (int sym2__ = 1; sym2__ <= ntlc; ++sym2__) {
            current_statement__ = 219;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 219;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 220;
      stan::math::validate_non_negative_index("loghrmean", "nx", nx);
      current_statement__ = 221;
      context__.validate_dims("data initialization", "loghrmean", "double",
        std::vector<size_t>{static_cast<size_t>(nx)});
      loghrmean = std::vector<double>(nx,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 221;
      loghrmean = context__.vals_r("loghrmean");
      current_statement__ = 222;
      stan::math::validate_non_negative_index("loghrsd", "nx", nx);
      current_statement__ = 223;
      context__.validate_dims("data initialization", "loghrsd", "double",
        std::vector<size_t>{static_cast<size_t>(nx)});
      loghrsd = std::vector<double>(nx,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 223;
      loghrsd = context__.vals_r("loghrsd");
      current_statement__ = 223;
      stan::math::check_greater_or_equal(function__, "loghrsd", loghrsd, 0);
      current_statement__ = 224;
      context__.validate_dims("data initialization", "nsoj", "int",
        std::vector<size_t>{});
      nsoj = std::numeric_limits<int>::min();
      current_statement__ = 224;
      nsoj = context__.vals_i("nsoj")[(1 - 1)];
      current_statement__ = 224;
      stan::math::check_greater_or_equal(function__, "nsoj", nsoj, 0);
      current_statement__ = 225;
      stan::math::validate_non_negative_index("sojy", "nsoj", nsoj);
      current_statement__ = 226;
      context__.validate_dims("data initialization", "sojy", "int",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojy = std::vector<int>(nsoj, std::numeric_limits<int>::min());
      current_statement__ = 226;
      sojy = context__.vals_i("sojy");
      current_statement__ = 226;
      stan::math::check_greater_or_equal(function__, "sojy", sojy, 0);
      current_statement__ = 227;
      stan::math::validate_non_negative_index("sojn", "nsoj", nsoj);
      current_statement__ = 228;
      context__.validate_dims("data initialization", "sojn", "int",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojn = std::vector<int>(nsoj, std::numeric_limits<int>::min());
      current_statement__ = 228;
      sojn = context__.vals_i("sojn");
      current_statement__ = 228;
      stan::math::check_greater_or_equal(function__, "sojn", sojn, 0);
      current_statement__ = 229;
      stan::math::validate_non_negative_index("sojstate", "nsoj", nsoj);
      current_statement__ = 230;
      context__.validate_dims("data initialization", "sojstate", "int",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojstate = std::vector<int>(nsoj, std::numeric_limits<int>::min());
      current_statement__ = 230;
      sojstate = context__.vals_i("sojstate");
      current_statement__ = 230;
      stan::math::check_greater_or_equal(function__, "sojstate", sojstate, 1);
      current_statement__ = 231;
      stan::math::validate_non_negative_index("sojtime", "nsoj", nsoj);
      current_statement__ = 232;
      context__.validate_dims("data initialization", "sojtime", "double",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojtime = std::vector<double>(nsoj,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 232;
      sojtime = context__.vals_r("sojtime");
      current_statement__ = 232;
      stan::math::check_greater_or_equal(function__, "sojtime", sojtime, 0);
      current_statement__ = 233;
      stan::math::validate_non_negative_index("sojtlcid", "nsoj", nsoj);
      current_statement__ = 234;
      context__.validate_dims("data initialization", "sojtlcid", "int",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojtlcid = std::vector<int>(nsoj, std::numeric_limits<int>::min());
      current_statement__ = 234;
      sojtlcid = context__.vals_i("sojtlcid");
      current_statement__ = 234;
      stan::math::check_greater_or_equal(function__, "sojtlcid", sojtlcid, 1);
      current_statement__ = 234;
      stan::math::check_less_or_equal(function__, "sojtlcid", sojtlcid, ntlc);
      current_statement__ = 235;
      context__.validate_dims("data initialization", "npastates", "int",
        std::vector<size_t>{});
      npastates = std::numeric_limits<int>::min();
      current_statement__ = 235;
      npastates = context__.vals_i("npastates")[(1 - 1)];
      current_statement__ = 236;
      stan::math::validate_non_negative_index("priorq_inds", "npriorq",
        npriorq);
      current_statement__ = 237;
      context__.validate_dims("data initialization", "priorq_inds", "int",
        std::vector<size_t>{static_cast<size_t>(npriorq)});
      priorq_inds = std::vector<int>(npriorq,
                      std::numeric_limits<int>::min());
      current_statement__ = 237;
      priorq_inds = context__.vals_i("priorq_inds");
      current_statement__ = 237;
      stan::math::check_greater_or_equal(function__, "priorq_inds",
        priorq_inds, 1);
      current_statement__ = 238;
      context__.validate_dims("data initialization", "ntrain", "int",
        std::vector<size_t>{});
      ntrain = std::numeric_limits<int>::min();
      current_statement__ = 238;
      ntrain = context__.vals_i("ntrain")[(1 - 1)];
      current_statement__ = 238;
      stan::math::check_greater_or_equal(function__, "ntrain", ntrain, 1);
      current_statement__ = 239;
      stan::math::validate_non_negative_index("traindat_x", "ntrain", ntrain);
      current_statement__ = 240;
      context__.validate_dims("data initialization", "traindat_x", "double",
        std::vector<size_t>{static_cast<size_t>(ntrain)});
      traindat_x_data__ = Eigen::Matrix<double,-1,1>::Constant(ntrain,
                            std::numeric_limits<double>::quiet_NaN());
      new (&traindat_x)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(traindat_x_data__.data(),
        ntrain);
      {
        std::vector<local_scalar_t__> traindat_x_flat__;
        current_statement__ = 240;
        traindat_x_flat__ = context__.vals_r("traindat_x");
        current_statement__ = 240;
        pos__ = 1;
        current_statement__ = 240;
        for (int sym1__ = 1; sym1__ <= ntrain; ++sym1__) {
          current_statement__ = 240;
          stan::model::assign(traindat_x, traindat_x_flat__[(pos__ - 1)],
            "assigning variable traindat_x", stan::model::index_uni(sym1__));
          current_statement__ = 240;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 241;
      stan::math::validate_non_negative_index("traindat_y", "ntrain", ntrain);
      current_statement__ = 242;
      stan::math::validate_non_negative_index("traindat_y", "npaq", npaq);
      current_statement__ = 243;
      context__.validate_dims("data initialization", "traindat_y", "double",
        std::vector<size_t>{static_cast<size_t>(ntrain),
          static_cast<size_t>(npaq)});
      traindat_y_data__ = Eigen::Matrix<double,-1,-1>::Constant(ntrain, npaq,
                            std::numeric_limits<double>::quiet_NaN());
      new (&traindat_y)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(traindat_y_data__.data(),
        ntrain, npaq);
      {
        std::vector<local_scalar_t__> traindat_y_flat__;
        current_statement__ = 243;
        traindat_y_flat__ = context__.vals_r("traindat_y");
        current_statement__ = 243;
        pos__ = 1;
        current_statement__ = 243;
        for (int sym1__ = 1; sym1__ <= npaq; ++sym1__) {
          current_statement__ = 243;
          for (int sym2__ = 1; sym2__ <= ntrain; ++sym2__) {
            current_statement__ = 243;
            stan::model::assign(traindat_y, traindat_y_flat__[(pos__ - 1)],
              "assigning variable traindat_y",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 243;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 244;
      stan::math::validate_non_negative_index("traindat_m", "ntrain", ntrain);
      current_statement__ = 245;
      stan::math::validate_non_negative_index("traindat_m", "npaq", npaq);
      current_statement__ = 246;
      context__.validate_dims("data initialization", "traindat_m", "double",
        std::vector<size_t>{static_cast<size_t>(ntrain),
          static_cast<size_t>(npaq)});
      traindat_m_data__ = Eigen::Matrix<double,-1,-1>::Constant(ntrain, npaq,
                            std::numeric_limits<double>::quiet_NaN());
      new (&traindat_m)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(traindat_m_data__.data(),
        ntrain, npaq);
      {
        std::vector<local_scalar_t__> traindat_m_flat__;
        current_statement__ = 246;
        traindat_m_flat__ = context__.vals_r("traindat_m");
        current_statement__ = 246;
        pos__ = 1;
        current_statement__ = 246;
        for (int sym1__ = 1; sym1__ <= npaq; ++sym1__) {
          current_statement__ = 246;
          for (int sym2__ = 1; sym2__ <= ntrain; ++sym2__) {
            current_statement__ = 246;
            stan::model::assign(traindat_m, traindat_m_flat__[(pos__ - 1)],
              "assigning variable traindat_m",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 246;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 247;
      stan::math::validate_non_negative_index("traindat_inds", "npastates",
        npastates);
      current_statement__ = 248;
      context__.validate_dims("data initialization", "traindat_inds", "int",
        std::vector<size_t>{static_cast<size_t>(npastates),
          static_cast<size_t>(2)});
      traindat_inds = std::vector<std::vector<int>>(npastates,
                        std::vector<int>(2, std::numeric_limits<int>::min()));
      {
        std::vector<int> traindat_inds_flat__;
        current_statement__ = 248;
        traindat_inds_flat__ = context__.vals_i("traindat_inds");
        current_statement__ = 248;
        pos__ = 1;
        current_statement__ = 248;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 248;
          for (int sym2__ = 1; sym2__ <= npastates; ++sym2__) {
            current_statement__ = 248;
            stan::model::assign(traindat_inds, traindat_inds_flat__[(pos__ -
              1)], "assigning variable traindat_inds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 248;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 248;
      stan::math::check_greater_or_equal(function__, "traindat_inds",
        traindat_inds, 1);
      current_statement__ = 249;
      stan::math::validate_non_negative_index("logshapemean", "npastates",
        npastates);
      current_statement__ = 250;
      context__.validate_dims("data initialization", "logshapemean",
        "double", std::vector<size_t>{static_cast<size_t>(npastates)});
      logshapemean_data__ = Eigen::Matrix<double,-1,1>::Constant(npastates,
                              std::numeric_limits<double>::quiet_NaN());
      new (&logshapemean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(logshapemean_data__.data(),
        npastates);
      {
        std::vector<local_scalar_t__> logshapemean_flat__;
        current_statement__ = 250;
        logshapemean_flat__ = context__.vals_r("logshapemean");
        current_statement__ = 250;
        pos__ = 1;
        current_statement__ = 250;
        for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
          current_statement__ = 250;
          stan::model::assign(logshapemean, logshapemean_flat__[(pos__ - 1)],
            "assigning variable logshapemean", stan::model::index_uni(sym1__));
          current_statement__ = 250;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 251;
      stan::math::validate_non_negative_index("logshapesd", "npastates",
        npastates);
      current_statement__ = 252;
      context__.validate_dims("data initialization", "logshapesd", "double",
        std::vector<size_t>{static_cast<size_t>(npastates)});
      logshapesd_data__ = Eigen::Matrix<double,-1,1>::Constant(npastates,
                            std::numeric_limits<double>::quiet_NaN());
      new (&logshapesd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(logshapesd_data__.data(),
        npastates);
      {
        std::vector<local_scalar_t__> logshapesd_flat__;
        current_statement__ = 252;
        logshapesd_flat__ = context__.vals_r("logshapesd");
        current_statement__ = 252;
        pos__ = 1;
        current_statement__ = 252;
        for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
          current_statement__ = 252;
          stan::model::assign(logshapesd, logshapesd_flat__[(pos__ - 1)],
            "assigning variable logshapesd", stan::model::index_uni(sym1__));
          current_statement__ = 252;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 252;
      stan::math::check_greater_or_equal(function__, "logshapesd",
        logshapesd, 0);
      current_statement__ = 253;
      stan::math::validate_non_negative_index("logscalemean", "npastates",
        npastates);
      current_statement__ = 254;
      context__.validate_dims("data initialization", "logscalemean",
        "double", std::vector<size_t>{static_cast<size_t>(npastates)});
      logscalemean_data__ = Eigen::Matrix<double,-1,1>::Constant(npastates,
                              std::numeric_limits<double>::quiet_NaN());
      new (&logscalemean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(logscalemean_data__.data(),
        npastates);
      {
        std::vector<local_scalar_t__> logscalemean_flat__;
        current_statement__ = 254;
        logscalemean_flat__ = context__.vals_r("logscalemean");
        current_statement__ = 254;
        pos__ = 1;
        current_statement__ = 254;
        for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
          current_statement__ = 254;
          stan::model::assign(logscalemean, logscalemean_flat__[(pos__ - 1)],
            "assigning variable logscalemean", stan::model::index_uni(sym1__));
          current_statement__ = 254;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 255;
      stan::math::validate_non_negative_index("logscalesd", "npastates",
        npastates);
      current_statement__ = 256;
      context__.validate_dims("data initialization", "logscalesd", "double",
        std::vector<size_t>{static_cast<size_t>(npastates)});
      logscalesd_data__ = Eigen::Matrix<double,-1,1>::Constant(npastates,
                            std::numeric_limits<double>::quiet_NaN());
      new (&logscalesd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(logscalesd_data__.data(),
        npastates);
      {
        std::vector<local_scalar_t__> logscalesd_flat__;
        current_statement__ = 256;
        logscalesd_flat__ = context__.vals_r("logscalesd");
        current_statement__ = 256;
        pos__ = 1;
        current_statement__ = 256;
        for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
          current_statement__ = 256;
          stan::model::assign(logscalesd, logscalesd_flat__[(pos__ - 1)],
            "assigning variable logscalesd", stan::model::index_uni(sym1__));
          current_statement__ = 256;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 256;
      stan::math::check_greater_or_equal(function__, "logscalesd",
        logscalesd, 0);
      current_statement__ = 257;
      context__.validate_dims("data initialization", "spline", "int",
        std::vector<size_t>{});
      spline = std::numeric_limits<int>::min();
      current_statement__ = 257;
      spline = context__.vals_i("spline")[(1 - 1)];
      current_statement__ = 257;
      stan::math::check_greater_or_equal(function__, "spline", spline, 1);
      current_statement__ = 257;
      stan::math::check_less_or_equal(function__, "spline", spline, 2);
      current_statement__ = 258;
      context__.validate_dims("data initialization", "npadest", "int",
        std::vector<size_t>{});
      npadest = std::numeric_limits<int>::min();
      current_statement__ = 258;
      npadest = context__.vals_i("npadest")[(1 - 1)];
      current_statement__ = 258;
      stan::math::check_greater_or_equal(function__, "npadest", npadest, 0);
      current_statement__ = 259;
      stan::math::validate_non_negative_index("dest_base", "npadest", npadest);
      current_statement__ = 260;
      context__.validate_dims("data initialization", "dest_base", "int",
        std::vector<size_t>{static_cast<size_t>(npadest)});
      dest_base = std::vector<int>(npadest, std::numeric_limits<int>::min());
      current_statement__ = 260;
      dest_base = context__.vals_i("dest_base");
      current_statement__ = 260;
      stan::math::check_greater_or_equal(function__, "dest_base", dest_base,
        0);
      current_statement__ = 260;
      stan::math::check_less_or_equal(function__, "dest_base", dest_base, 1);
      current_statement__ = 261;
      stan::math::validate_non_negative_index("dest_state", "npadest",
        npadest);
      current_statement__ = 262;
      context__.validate_dims("data initialization", "dest_state", "int",
        std::vector<size_t>{static_cast<size_t>(npadest)});
      dest_state = std::vector<int>(npadest, std::numeric_limits<int>::min());
      current_statement__ = 262;
      dest_state = context__.vals_i("dest_state");
      current_statement__ = 262;
      stan::math::check_greater_or_equal(function__, "dest_state",
        dest_state, 1);
      current_statement__ = 263;
      stan::math::validate_non_negative_index("loind", "npadest", npadest);
      current_statement__ = 264;
      context__.validate_dims("data initialization", "loind", "int",
        std::vector<size_t>{static_cast<size_t>(npadest)});
      loind = std::vector<int>(npadest, std::numeric_limits<int>::min());
      current_statement__ = 264;
      loind = context__.vals_i("loind");
      current_statement__ = 264;
      stan::math::check_greater_or_equal(function__, "loind", loind, 0);
      current_statement__ = 265;
      context__.validate_dims("data initialization", "npaqall", "int",
        std::vector<size_t>{});
      npaqall = std::numeric_limits<int>::min();
      current_statement__ = 265;
      npaqall = context__.vals_i("npaqall")[(1 - 1)];
      current_statement__ = 266;
      stan::math::validate_non_negative_index("paq_inds", "npaqall", npaqall);
      current_statement__ = 267;
      context__.validate_dims("data initialization", "paq_inds", "int",
        std::vector<size_t>{static_cast<size_t>(npaqall)});
      paq_inds = std::vector<int>(npaqall, std::numeric_limits<int>::min());
      current_statement__ = 267;
      paq_inds = context__.vals_i("paq_inds");
      current_statement__ = 267;
      stan::math::check_greater_or_equal(function__, "paq_inds", paq_inds, 1);
      current_statement__ = 267;
      stan::math::check_less_or_equal(function__, "paq_inds", paq_inds,
        nqpars);
      current_statement__ = 268;
      stan::math::validate_non_negative_index("praterow", "npaqall", npaqall);
      current_statement__ = 269;
      context__.validate_dims("data initialization", "praterow", "int",
        std::vector<size_t>{static_cast<size_t>(npaqall)});
      praterow = std::vector<int>(npaqall, std::numeric_limits<int>::min());
      current_statement__ = 269;
      praterow = context__.vals_i("praterow");
      current_statement__ = 269;
      stan::math::check_greater_or_equal(function__, "praterow", praterow, 1);
      current_statement__ = 269;
      stan::math::check_less_or_equal(function__, "praterow", praterow, npaq);
      current_statement__ = 270;
      stan::math::validate_non_negative_index("pastate", "npaqall", npaqall);
      current_statement__ = 271;
      context__.validate_dims("data initialization", "pastate", "int",
        std::vector<size_t>{static_cast<size_t>(npaqall)});
      pastate = std::vector<int>(npaqall, std::numeric_limits<int>::min());
      current_statement__ = 271;
      pastate = context__.vals_i("pastate");
      current_statement__ = 271;
      stan::math::check_greater_or_equal(function__, "pastate", pastate, 1);
      current_statement__ = 271;
      stan::math::check_less_or_equal(function__, "pastate", pastate,
        npastates);
      current_statement__ = 272;
      stan::math::validate_non_negative_index("prate_abs", "npaqall", npaqall);
      current_statement__ = 273;
      context__.validate_dims("data initialization", "prate_abs", "int",
        std::vector<size_t>{static_cast<size_t>(npaqall)});
      prate_abs = std::vector<int>(npaqall, std::numeric_limits<int>::min());
      current_statement__ = 273;
      prate_abs = context__.vals_i("prate_abs");
      current_statement__ = 273;
      stan::math::check_greater_or_equal(function__, "prate_abs", prate_abs,
        0);
      current_statement__ = 273;
      stan::math::check_less_or_equal(function__, "prate_abs", prate_abs, 1);
      current_statement__ = 274;
      stan::math::validate_non_negative_index("dest_inds", "npaqall", npaqall);
      current_statement__ = 275;
      context__.validate_dims("data initialization", "dest_inds", "int",
        std::vector<size_t>{static_cast<size_t>(npaqall)});
      dest_inds = std::vector<int>(npaqall, std::numeric_limits<int>::min());
      current_statement__ = 275;
      dest_inds = context__.vals_i("dest_inds");
      current_statement__ = 276;
      context__.validate_dims("data initialization", "noddsabs", "int",
        std::vector<size_t>{});
      noddsabs = std::numeric_limits<int>::min();
      current_statement__ = 276;
      noddsabs = context__.vals_i("noddsabs")[(1 - 1)];
      current_statement__ = 276;
      stan::math::check_greater_or_equal(function__, "noddsabs", noddsabs, 0);
      current_statement__ = 277;
      stan::math::validate_non_negative_index("loamean", "noddsabs", noddsabs);
      current_statement__ = 278;
      context__.validate_dims("data initialization", "loamean", "double",
        std::vector<size_t>{static_cast<size_t>(noddsabs)});
      loamean_data__ = Eigen::Matrix<double,-1,1>::Constant(noddsabs,
                         std::numeric_limits<double>::quiet_NaN());
      new (&loamean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(loamean_data__.data(),
        noddsabs);
      {
        std::vector<local_scalar_t__> loamean_flat__;
        current_statement__ = 278;
        loamean_flat__ = context__.vals_r("loamean");
        current_statement__ = 278;
        pos__ = 1;
        current_statement__ = 278;
        for (int sym1__ = 1; sym1__ <= noddsabs; ++sym1__) {
          current_statement__ = 278;
          stan::model::assign(loamean, loamean_flat__[(pos__ - 1)],
            "assigning variable loamean", stan::model::index_uni(sym1__));
          current_statement__ = 278;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 279;
      stan::math::validate_non_negative_index("loasd", "noddsabs", noddsabs);
      current_statement__ = 280;
      context__.validate_dims("data initialization", "loasd", "double",
        std::vector<size_t>{static_cast<size_t>(noddsabs)});
      loasd_data__ = Eigen::Matrix<double,-1,1>::Constant(noddsabs,
                       std::numeric_limits<double>::quiet_NaN());
      new (&loasd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(loasd_data__.data(), noddsabs);
      {
        std::vector<local_scalar_t__> loasd_flat__;
        current_statement__ = 280;
        loasd_flat__ = context__.vals_r("loasd");
        current_statement__ = 280;
        pos__ = 1;
        current_statement__ = 280;
        for (int sym1__ = 1; sym1__ <= noddsabs; ++sym1__) {
          current_statement__ = 280;
          stan::model::assign(loasd, loasd_flat__[(pos__ - 1)],
            "assigning variable loasd", stan::model::index_uni(sym1__));
          current_statement__ = 280;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 280;
      stan::math::check_greater_or_equal(function__, "loasd", loasd, 0);
      current_statement__ = 281;
      stan::math::validate_non_negative_index("logq_markov", "npriorq",
        npriorq);
      current_statement__ = 282;
      stan::math::validate_non_negative_index("logshape", "npastates",
        npastates);
      current_statement__ = 283;
      stan::math::validate_non_negative_index("logscale", "npastates",
        npastates);
      current_statement__ = 284;
      stan::math::validate_non_negative_index("logoddse", "nepars", nepars);
      current_statement__ = 285;
      stan::math::validate_non_negative_index("loghr", "nx", nx);
      current_statement__ = 286;
      stan::math::validate_non_negative_index("logoddsabs", "noddsabs",
        noddsabs);
      current_statement__ = 287;
      stan::math::validate_non_negative_index("E", "K", K);
      current_statement__ = 288;
      stan::math::validate_non_negative_index("E", "K", K);
      current_statement__ = 289;
      stan::math::validate_non_negative_index("evec", "nepars", nepars);
      current_statement__ = 290;
      stan::math::validate_non_negative_index("shape", "npastates", npastates);
      current_statement__ = 291;
      stan::math::validate_non_negative_index("scale", "npastates", npastates);
      current_statement__ = 292;
      stan::math::validate_non_negative_index("padest", "npadest", npadest);
      current_statement__ = 293;
      stan::math::validate_non_negative_index("logq", "nqpars", nqpars);
      current_statement__ = 294;
      stan::math::validate_non_negative_index("Q", "ntlc", ntlc);
      current_statement__ = 295;
      stan::math::validate_non_negative_index("Q", "K", K);
      current_statement__ = 296;
      stan::math::validate_non_negative_index("Q", "K", K);
      current_statement__ = 297;
      stan::math::validate_non_negative_index("qtmp", "nqpars", nqpars);
      current_statement__ = 298;
      stan::math::validate_non_negative_index("P", "ntlc", ntlc);
      current_statement__ = 299;
      stan::math::validate_non_negative_index("P", "K", K);
      current_statement__ = 300;
      stan::math::validate_non_negative_index("P", "K", K);
      current_statement__ = 301;
      stan::math::validate_non_negative_index("mp_jk", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = npriorq + npastates + npastates + nepars + nx +
      noddsabs;
  }
  inline std::string model_name() const final {
    return "model_hmm";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_hmm_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> logq_markov =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npriorq, DUMMY_VAR__);
      current_statement__ = 1;
      logq_markov = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(npriorq);
      Eigen::Matrix<local_scalar_t__,-1,1> logshape =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
          DUMMY_VAR__);
      current_statement__ = 2;
      logshape = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(npastates);
      Eigen::Matrix<local_scalar_t__,-1,1> logscale =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
          DUMMY_VAR__);
      current_statement__ = 3;
      logscale = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(npastates);
      std::vector<local_scalar_t__> logoddse =
        std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
      current_statement__ = 4;
      logoddse = in__.template read<std::vector<local_scalar_t__>>(nepars);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nx, DUMMY_VAR__);
      current_statement__ = 5;
      loghr = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nx);
      Eigen::Matrix<local_scalar_t__,-1,1> logoddsabs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(noddsabs, DUMMY_VAR__);
      current_statement__ = 6;
      logoddsabs = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(noddsabs);
      local_scalar_t__ loglik = DUMMY_VAR__;
      current_statement__ = 7;
      loglik = 0;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> E =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(K,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 8;
      stan::model::assign(E,
        stan::math::rep_array(stan::math::rep_vector(0, K), K),
        "assigning variable E");
      std::vector<local_scalar_t__> evec =
        std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
      current_statement__ = 39;
      if (stan::math::logical_gt(nepars, 0)) {
        current_statement__ = 18;
        stan::math::validate_non_negative_index("sumodds", "K", K);
        std::vector<local_scalar_t__> sumodds =
          std::vector<local_scalar_t__>(K, DUMMY_VAR__);
        current_statement__ = 20;
        stan::math::validate_non_negative_index("oddse", "nepars", nepars);
        std::vector<local_scalar_t__> oddse =
          std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
        current_statement__ = 24;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 22;
          stan::model::assign(sumodds, 1, "assigning variable sumodds",
            stan::model::index_uni(i));
        }
        current_statement__ = 28;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 25;
          stan::model::assign(oddse,
            stan::math::exp(
              stan::model::rvalue(logoddse, "logoddse",
                stan::model::index_uni(i))), "assigning variable oddse",
            stan::model::index_uni(i));
          current_statement__ = 26;
          stan::model::assign(sumodds,
            (stan::model::rvalue(sumodds, "sumodds",
               stan::model::index_uni(
                 stan::model::rvalue(erow, "erow", stan::model::index_uni(i))))
            +
            stan::model::rvalue(oddse, "oddse", stan::model::index_uni(i))),
            "assigning variable sumodds",
            stan::model::index_uni(
              stan::model::rvalue(erow, "erow", stan::model::index_uni(i))));
        }
        current_statement__ = 31;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 29;
          stan::model::assign(sumodds,
            (stan::model::rvalue(sumodds, "sumodds",
               stan::model::index_uni(i)) / (1 -
            stan::model::rvalue(sumefixed, "sumefixed",
              stan::model::index_uni(i)))), "assigning variable sumodds",
            stan::model::index_uni(i));
        }
        current_statement__ = 34;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 32;
          stan::model::assign(evec,
            (stan::model::rvalue(oddse, "oddse", stan::model::index_uni(i)) /
            stan::model::rvalue(sumodds, "sumodds",
              stan::model::index_uni(
                stan::model::rvalue(erow, "erow", stan::model::index_uni(i))))),
            "assigning variable evec", stan::model::index_uni(i));
        }
        current_statement__ = 37;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 35;
          stan::model::assign(E,
            stan::model::rvalue(evec, "evec", stan::model::index_uni(i)),
            "assigning variable E",
            stan::model::index_uni(
              stan::model::rvalue(erow, "erow", stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(ecol, "ecol", stan::model::index_uni(i))));
        }
      }
      current_statement__ = 44;
      if (stan::math::logical_gt(nefix, 0)) {
        current_statement__ = 42;
        for (int i = 1; i <= nefix; ++i) {
          current_statement__ = 40;
          stan::model::assign(E,
            stan::model::rvalue(efix, "efix", stan::model::index_uni(i)),
            "assigning variable E",
            stan::model::index_uni(
              stan::model::rvalue(efixrow, "efixrow",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(efixcol, "efixcol",
                stan::model::index_uni(i))));
        }
      }
      current_statement__ = 47;
      for (int j = 1; j <= K; ++j) {
        current_statement__ = 45;
        stan::model::assign(E, (1 -
          stan::math::sum(
            stan::model::rvalue(E, "E", stan::model::index_uni(j),
              stan::model::index_min_max(1, K)))), "assigning variable E",
          stan::model::index_uni(j), stan::model::index_uni(j));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> shape =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
          DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(shape, stan::math::exp(logshape),
        "assigning variable shape");
      Eigen::Matrix<local_scalar_t__,-1,1> scale =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
          DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(scale, stan::math::exp(logscale),
        "assigning variable scale");
      Eigen::Matrix<local_scalar_t__,-1,1> padest =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npadest, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> logq =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nqpars, DUMMY_VAR__);
      current_statement__ = 95;
      if (stan::math::logical_gt(npastates, 0)) {
        current_statement__ = 52;
        stan::math::validate_non_negative_index("prates", "npaq", npaq);
        current_statement__ = 53;
        stan::math::validate_non_negative_index("prates", "npastates",
          npastates);
        Eigen::Matrix<local_scalar_t__,-1,-1> prates =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(npaq, npastates,
            DUMMY_VAR__);
        current_statement__ = 55;
        stan::math::validate_non_negative_index("odds", "npadest", npadest);
        Eigen::Matrix<local_scalar_t__,-1,1> odds =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npadest,
            DUMMY_VAR__);
        current_statement__ = 57;
        stan::math::validate_non_negative_index("sumoddsa", "npastates",
          npastates);
        Eigen::Matrix<local_scalar_t__,-1,1> sumoddsa =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
            DUMMY_VAR__);
        current_statement__ = 59;
        stan::math::validate_non_negative_index("q_full", "nqpars", nqpars);
        Eigen::Matrix<local_scalar_t__,-1,1> q_full =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nqpars, DUMMY_VAR__);
        current_statement__ = 65;
        for (int j = 1; j <= npastates; ++j) {
          int tstart = std::numeric_limits<int>::min();
          current_statement__ = 61;
          tstart = stan::model::rvalue(traindat_inds, "traindat_inds",
                     stan::model::index_uni(j), stan::model::index_uni(1));
          int tend = std::numeric_limits<int>::min();
          current_statement__ = 62;
          tend = stan::model::rvalue(traindat_inds, "traindat_inds",
                   stan::model::index_uni(j), stan::model::index_uni(2));
          current_statement__ = 63;
          stan::model::assign(prates,
            shapescale_to_rates(
              stan::model::rvalue(shape, "shape", stan::model::index_uni(j)),
              stan::model::rvalue(scale, "scale", stan::model::index_uni(j)),
              npaq,
              stan::model::rvalue(traindat_x, "traindat_x",
                stan::model::index_min_max(tstart, tend)),
              stan::model::rvalue(traindat_y, "traindat_y",
                stan::model::index_min_max(tstart, tend),
                stan::model::index_omni()),
              stan::model::rvalue(traindat_m, "traindat_m",
                stan::model::index_min_max(tstart, tend),
                stan::model::index_omni()), spline, pstream__),
            "assigning variable prates", stan::model::index_min_max(1, npaq),
            stan::model::index_uni(j));
        }
        current_statement__ = 79;
        if (stan::math::logical_gt(npadest, 0)) {
          current_statement__ = 74;
          for (int i = 1; i <= npadest; ++i) {
            current_statement__ = 72;
            if (stan::math::logical_eq(
                  stan::model::rvalue(dest_base, "dest_base",
                    stan::model::index_uni(i)), 1)) {
              current_statement__ = 69;
              stan::model::assign(odds, 1, "assigning variable odds",
                stan::model::index_uni(i));
              current_statement__ = 70;
              stan::model::assign(sumoddsa,
                stan::model::rvalue(odds, "odds", stan::model::index_uni(i)),
                "assigning variable sumoddsa",
                stan::model::index_uni(
                  stan::model::rvalue(dest_state, "dest_state",
                    stan::model::index_uni(i))));
            } else {
              current_statement__ = 66;
              stan::model::assign(odds,
                stan::math::exp(
                  stan::model::rvalue(logoddsabs, "logoddsabs",
                    stan::model::index_uni(
                      stan::model::rvalue(loind, "loind",
                        stan::model::index_uni(i))))),
                "assigning variable odds", stan::model::index_uni(i));
              current_statement__ = 67;
              stan::model::assign(sumoddsa,
                (stan::model::rvalue(sumoddsa, "sumoddsa",
                   stan::model::index_uni(
                     stan::model::rvalue(dest_state, "dest_state",
                       stan::model::index_uni(i)))) +
                stan::model::rvalue(odds, "odds", stan::model::index_uni(i))),
                "assigning variable sumoddsa",
                stan::model::index_uni(
                  stan::model::rvalue(dest_state, "dest_state",
                    stan::model::index_uni(i))));
            }
          }
          current_statement__ = 77;
          for (int i = 1; i <= npadest; ++i) {
            current_statement__ = 75;
            stan::model::assign(padest,
              (stan::model::rvalue(odds, "odds", stan::model::index_uni(i)) /
              stan::model::rvalue(sumoddsa, "sumoddsa",
                stan::model::index_uni(
                  stan::model::rvalue(dest_state, "dest_state",
                    stan::model::index_uni(i))))),
              "assigning variable padest", stan::model::index_uni(i));
          }
        }
        current_statement__ = 86;
        for (int i = 1; i <= npaqall; ++i) {
          current_statement__ = 84;
          if ((stan::math::primitive_value(stan::math::logical_gt(npadest, 0))
              &&
              stan::math::primitive_value(
                stan::model::rvalue(prate_abs, "prate_abs",
                  stan::model::index_uni(i))))) {
            current_statement__ = 82;
            stan::model::assign(q_full,
              (stan::model::rvalue(prates, "prates",
                 stan::model::index_uni(
                   stan::model::rvalue(praterow, "praterow",
                     stan::model::index_uni(i))),
                 stan::model::index_uni(
                   stan::model::rvalue(pastate, "pastate",
                     stan::model::index_uni(i)))) *
              stan::model::rvalue(padest, "padest",
                stan::model::index_uni(
                  stan::model::rvalue(dest_inds, "dest_inds",
                    stan::model::index_uni(i))))),
              "assigning variable q_full",
              stan::model::index_uni(
                stan::model::rvalue(paq_inds, "paq_inds",
                  stan::model::index_uni(i))));
          } else {
            current_statement__ = 80;
            stan::model::assign(q_full,
              stan::model::rvalue(prates, "prates",
                stan::model::index_uni(
                  stan::model::rvalue(praterow, "praterow",
                    stan::model::index_uni(i))),
                stan::model::index_uni(
                  stan::model::rvalue(pastate, "pastate",
                    stan::model::index_uni(i)))),
              "assigning variable q_full",
              stan::model::index_uni(
                stan::model::rvalue(paq_inds, "paq_inds",
                  stan::model::index_uni(i))));
          }
        }
        current_statement__ = 89;
        for (int i = 1; i <= npriorq; ++i) {
          current_statement__ = 87;
          stan::model::assign(q_full,
            stan::math::exp(
              stan::model::rvalue(logq_markov, "logq_markov",
                stan::model::index_uni(i))), "assigning variable q_full",
            stan::model::index_uni(
              stan::model::rvalue(priorq_inds, "priorq_inds",
                stan::model::index_uni(i))));
        }
        current_statement__ = 93;
        for (int i = 1; i <= nqpars; ++i) {
          current_statement__ = 90;
          stan::model::assign(q_full,
            stan::math::fmax(
              stan::model::rvalue(q_full, "q_full", stan::model::index_uni(i)),
              1e-08), "assigning variable q_full", stan::model::index_uni(i));
          current_statement__ = 91;
          stan::model::assign(logq,
            stan::math::log(
              stan::model::rvalue(q_full, "q_full", stan::model::index_uni(i))),
            "assigning variable logq", stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 50;
        for (int i = 1; i <= npriorq; ++i) {
          current_statement__ = 48;
          stan::model::assign(logq,
            stan::model::rvalue(logq_markov, "logq_markov",
              stan::model::index_uni(i)), "assigning variable logq",
            stan::model::index_uni(i));
        }
      }
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> Q =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(ntlc,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> qtmp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nqpars, DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> P =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(ntlc,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__));
      current_statement__ = 107;
      for (int j = 1; j <= ntlc; ++j) {
        current_statement__ = 96;
        stan::model::assign(Q, stan::math::rep_matrix(0, K, K),
          "assigning variable Q", stan::model::index_uni(j),
          stan::model::index_omni(), stan::model::index_omni());
        current_statement__ = 102;
        for (int i = 1; i <= nqpars; ++i) {
          current_statement__ = 97;
          stan::model::assign(qtmp,
            stan::model::rvalue(logq, "logq", stan::model::index_uni(i)),
            "assigning variable qtmp", stan::model::index_uni(i));
          current_statement__ = 99;
          if (stan::math::logical_gt(
                stan::model::rvalue(nxq, "nxq", stan::model::index_uni(i)), 0)) {
            current_statement__ = 98;
            stan::model::assign(qtmp,
              (stan::model::rvalue(qtmp, "qtmp", stan::model::index_uni(i)) +
              stan::math::multiply(
                stan::model::rvalue(X, "X", stan::model::index_uni(j),
                  stan::model::index_min_max(
                    stan::model::rvalue(xstart, "xstart",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(xend, "xend",
                      stan::model::index_uni(i)))),
                stan::model::rvalue(loghr, "loghr",
                  stan::model::index_min_max(
                    stan::model::rvalue(xstart, "xstart",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(xend, "xend",
                      stan::model::index_uni(i)))))),
              "assigning variable qtmp", stan::model::index_uni(i));
          }
          current_statement__ = 100;
          stan::model::assign(Q,
            stan::math::exp(
              stan::model::rvalue(qtmp, "qtmp", stan::model::index_uni(i))),
            "assigning variable Q", stan::model::index_uni(j),
            stan::model::index_uni(
              stan::model::rvalue(qrow, "qrow", stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(qcol, "qcol", stan::model::index_uni(i))));
        }
        current_statement__ = 105;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 103;
          stan::model::assign(Q,
            -stan::math::sum(
               stan::model::rvalue(Q, "Q", stan::model::index_uni(j),
                 stan::model::index_uni(k), stan::model::index_min_max(1, K))),
            "assigning variable Q", stan::model::index_uni(j),
            stan::model::index_uni(k), stan::model::index_uni(k));
        }
      }
      std::vector<local_scalar_t__> mp_jk =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 110;
      for (int i = 1; i <= ntlc; ++i) {
        current_statement__ = 108;
        stan::model::assign(P,
          stan::math::matrix_exp(
            stan::math::multiply(
              stan::model::rvalue(Q, "Q", stan::model::index_uni(i),
                stan::model::index_omni(), stan::model::index_omni()),
              stan::model::rvalue(timelag, "timelag",
                stan::model::index_uni(i)))), "assigning variable P",
          stan::model::index_uni(i), stan::model::index_omni(),
          stan::model::index_omni());
      }
      current_statement__ = 129;
      for (int i = 1; i <= nindiv; ++i) {
        current_statement__ = 111;
        stan::math::validate_non_negative_index("mp", "TI[i]",
          stan::model::rvalue(TI, "TI", stan::model::index_uni(i)));
        current_statement__ = 112;
        stan::math::validate_non_negative_index("mp", "K", K);
        std::vector<std::vector<local_scalar_t__>> mp =
          std::vector<std::vector<local_scalar_t__>>(stan::model::rvalue(TI,
                                                       "TI",
                                                       stan::model::index_uni(
                                                         i)),
            std::vector<local_scalar_t__>(K, DUMMY_VAR__));
        current_statement__ = 115;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 114;
          stan::model::assign(mp,
            (stan::model::rvalue(E, "E", stan::model::index_uni(k),
               stan::model::index_uni(
                 stan::model::rvalue(obs, "obs",
                   stan::model::index_uni(
                     stan::model::rvalue(starti, "starti",
                       stan::model::index_uni(i)))))) *
            stan::model::rvalue(initprobs, "initprobs",
              stan::model::index_uni(i), stan::model::index_uni(k))),
            "assigning variable mp", stan::model::index_uni(1),
            stan::model::index_uni(k));
        }
        current_statement__ = 126;
        if (stan::math::logical_gt(
              stan::model::rvalue(TI, "TI", stan::model::index_uni(i)), 1)) {
          current_statement__ = 124;
          for (int t = 2; t <=
               stan::model::rvalue(TI, "TI", stan::model::index_uni(i)); ++t) {
            int oi = std::numeric_limits<int>::min();
            current_statement__ = 116;
            oi = ((stan::model::rvalue(starti, "starti",
                     stan::model::index_uni(i))
              - 1) + t);
            current_statement__ = 122;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 119;
              for (int j = 1; j <= K; ++j) {
                current_statement__ = 117;
                stan::model::assign(mp_jk,
                  ((stan::model::rvalue(mp, "mp",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(j)) *
                  stan::model::rvalue(P, "P",
                    stan::model::index_uni(
                      stan::model::rvalue(tlcid, "tlcid",
                        stan::model::index_uni(oi))),
                    stan::model::index_uni(j), stan::model::index_uni(k))) *
                  stan::model::rvalue(E, "E", stan::model::index_uni(k),
                    stan::model::index_uni(
                      stan::model::rvalue(obs, "obs",
                        stan::model::index_uni(oi))))),
                  "assigning variable mp_jk", stan::model::index_uni(j));
              }
              current_statement__ = 120;
              stan::model::assign(mp,
                stan::math::sum(
                  stan::model::rvalue(mp_jk, "mp_jk",
                    stan::model::index_min_max(1, K))),
                "assigning variable mp", stan::model::index_uni(t),
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 127;
        loglik = (loglik +
          stan::math::log(
            stan::math::sum(
              stan::model::rvalue(mp, "mp",
                stan::model::index_uni(
                  stan::model::rvalue(TI, "TI", stan::model::index_uni(i))),
                stan::model::index_min_max(1, K)))));
      }
      current_statement__ = 140;
      if (stan::math::logical_gt(nsoj, 0)) {
        current_statement__ = 130;
        stan::math::validate_non_negative_index("Ptmp", "K", K);
        current_statement__ = 131;
        stan::math::validate_non_negative_index("Ptmp", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,-1> Ptmp =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__);
        local_scalar_t__ sprob = DUMMY_VAR__;
        current_statement__ = 138;
        for (int i = 1; i <= nsoj; ++i) {
          current_statement__ = 134;
          stan::model::assign(Ptmp,
            stan::math::matrix_exp(
              stan::math::multiply(
                stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(
                    stan::model::rvalue(sojtlcid, "sojtlcid",
                      stan::model::index_uni(i))), stan::model::index_omni(),
                  stan::model::index_omni()),
                stan::model::rvalue(sojtime, "sojtime",
                  stan::model::index_uni(i)))), "assigning variable Ptmp");
          current_statement__ = 135;
          sprob = stan::model::rvalue(Ptmp, "Ptmp",
                    stan::model::index_uni(
                      stan::model::rvalue(sojstate, "sojstate",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(
                      stan::model::rvalue(sojstate, "sojstate",
                        stan::model::index_uni(i))));
          current_statement__ = 136;
          loglik = (loglik +
            stan::math::binomial_lpmf<false>(
              stan::model::rvalue(sojy, "sojy", stan::model::index_uni(i)),
              stan::model::rvalue(sojn, "sojn", stan::model::index_uni(i)),
              sprob));
        }
      }
      {
        current_statement__ = 143;
        for (int i = 1; i <= npriorq; ++i) {
          current_statement__ = 141;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(logq_markov, "logq_markov",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(logqmean, "logqmean",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(logqsd, "logqsd",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 147;
        for (int i = 1; i <= npastates; ++i) {
          current_statement__ = 144;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(logshape, "logshape",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(logshapemean, "logshapemean",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(logshapesd, "logshapesd",
                             stan::model::index_uni(i))));
          current_statement__ = 145;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(logscale, "logscale",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(logscalemean, "logscalemean",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(logscalesd, "logscalesd",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 152;
        if (stan::math::logical_gt(nx, 0)) {
          current_statement__ = 150;
          for (int i = 1; i <= nx; ++i) {
            current_statement__ = 148;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(loghr, "loghr",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loghrmean, "loghrmean",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loghrsd, "loghrsd",
                               stan::model::index_uni(i))));
          }
        }
        current_statement__ = 157;
        if (stan::math::logical_gt(nepars, 0)) {
          current_statement__ = 155;
          for (int i = 1; i <= nepars; ++i) {
            current_statement__ = 153;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(logoddse, "logoddse",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loemean, "loemean",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loesd, "loesd",
                               stan::model::index_uni(i))));
          }
        }
        current_statement__ = 162;
        if (stan::math::logical_gt(noddsabs, 0)) {
          current_statement__ = 160;
          for (int i = 1; i <= noddsabs; ++i) {
            current_statement__ = 158;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(logoddsabs, "logoddsabs",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loamean, "loamean",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loasd, "loasd",
                               stan::model::index_uni(i))));
          }
        }
        current_statement__ = 163;
        lp_accum__.add(loglik);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_hmm_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> logq_markov =
        Eigen::Matrix<double,-1,1>::Constant(npriorq,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      logq_markov = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(npriorq);
      Eigen::Matrix<double,-1,1> logshape =
        Eigen::Matrix<double,-1,1>::Constant(npastates,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      logshape = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(npastates);
      Eigen::Matrix<double,-1,1> logscale =
        Eigen::Matrix<double,-1,1>::Constant(npastates,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      logscale = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(npastates);
      std::vector<double> logoddse =
        std::vector<double>(nepars, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      logoddse = in__.template read<std::vector<local_scalar_t__>>(nepars);
      Eigen::Matrix<double,-1,1> loghr =
        Eigen::Matrix<double,-1,1>::Constant(nx,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      loghr = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nx);
      Eigen::Matrix<double,-1,1> logoddsabs =
        Eigen::Matrix<double,-1,1>::Constant(noddsabs,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      logoddsabs = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(noddsabs);
      double loglik = std::numeric_limits<double>::quiet_NaN();
      std::vector<Eigen::Matrix<double,-1,1>> E =
        std::vector<Eigen::Matrix<double,-1,1>>(K,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> evec =
        std::vector<double>(nepars, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> shape =
        Eigen::Matrix<double,-1,1>::Constant(npastates,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> scale =
        Eigen::Matrix<double,-1,1>::Constant(npastates,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> padest =
        Eigen::Matrix<double,-1,1>::Constant(npadest,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> logq =
        Eigen::Matrix<double,-1,1>::Constant(nqpars,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,-1>> Q =
        std::vector<Eigen::Matrix<double,-1,-1>>(ntlc,
          Eigen::Matrix<double,-1,-1>::Constant(K, K,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> qtmp =
        Eigen::Matrix<double,-1,1>::Constant(nqpars,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,-1>> P =
        std::vector<Eigen::Matrix<double,-1,-1>>(ntlc,
          Eigen::Matrix<double,-1,-1>::Constant(K, K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> mp_jk =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      out__.write(logq_markov);
      out__.write(logshape);
      out__.write(logscale);
      out__.write(logoddse);
      out__.write(loghr);
      out__.write(logoddsabs);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 7;
      loglik = 0;
      current_statement__ = 8;
      stan::model::assign(E,
        stan::math::rep_array(stan::math::rep_vector(0, K), K),
        "assigning variable E");
      current_statement__ = 39;
      if (stan::math::logical_gt(nepars, 0)) {
        current_statement__ = 18;
        stan::math::validate_non_negative_index("sumodds", "K", K);
        std::vector<double> sumodds =
          std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 20;
        stan::math::validate_non_negative_index("oddse", "nepars", nepars);
        std::vector<double> oddse =
          std::vector<double>(nepars,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 24;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 22;
          stan::model::assign(sumodds, 1, "assigning variable sumodds",
            stan::model::index_uni(i));
        }
        current_statement__ = 28;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 25;
          stan::model::assign(oddse,
            stan::math::exp(
              stan::model::rvalue(logoddse, "logoddse",
                stan::model::index_uni(i))), "assigning variable oddse",
            stan::model::index_uni(i));
          current_statement__ = 26;
          stan::model::assign(sumodds,
            (stan::model::rvalue(sumodds, "sumodds",
               stan::model::index_uni(
                 stan::model::rvalue(erow, "erow", stan::model::index_uni(i))))
            +
            stan::model::rvalue(oddse, "oddse", stan::model::index_uni(i))),
            "assigning variable sumodds",
            stan::model::index_uni(
              stan::model::rvalue(erow, "erow", stan::model::index_uni(i))));
        }
        current_statement__ = 31;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 29;
          stan::model::assign(sumodds,
            (stan::model::rvalue(sumodds, "sumodds",
               stan::model::index_uni(i)) / (1 -
            stan::model::rvalue(sumefixed, "sumefixed",
              stan::model::index_uni(i)))), "assigning variable sumodds",
            stan::model::index_uni(i));
        }
        current_statement__ = 34;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 32;
          stan::model::assign(evec,
            (stan::model::rvalue(oddse, "oddse", stan::model::index_uni(i)) /
            stan::model::rvalue(sumodds, "sumodds",
              stan::model::index_uni(
                stan::model::rvalue(erow, "erow", stan::model::index_uni(i))))),
            "assigning variable evec", stan::model::index_uni(i));
        }
        current_statement__ = 37;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 35;
          stan::model::assign(E,
            stan::model::rvalue(evec, "evec", stan::model::index_uni(i)),
            "assigning variable E",
            stan::model::index_uni(
              stan::model::rvalue(erow, "erow", stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(ecol, "ecol", stan::model::index_uni(i))));
        }
      }
      current_statement__ = 44;
      if (stan::math::logical_gt(nefix, 0)) {
        current_statement__ = 42;
        for (int i = 1; i <= nefix; ++i) {
          current_statement__ = 40;
          stan::model::assign(E,
            stan::model::rvalue(efix, "efix", stan::model::index_uni(i)),
            "assigning variable E",
            stan::model::index_uni(
              stan::model::rvalue(efixrow, "efixrow",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(efixcol, "efixcol",
                stan::model::index_uni(i))));
        }
      }
      current_statement__ = 47;
      for (int j = 1; j <= K; ++j) {
        current_statement__ = 45;
        stan::model::assign(E, (1 -
          stan::math::sum(
            stan::model::rvalue(E, "E", stan::model::index_uni(j),
              stan::model::index_min_max(1, K)))), "assigning variable E",
          stan::model::index_uni(j), stan::model::index_uni(j));
      }
      current_statement__ = 10;
      stan::model::assign(shape, stan::math::exp(logshape),
        "assigning variable shape");
      current_statement__ = 11;
      stan::model::assign(scale, stan::math::exp(logscale),
        "assigning variable scale");
      current_statement__ = 95;
      if (stan::math::logical_gt(npastates, 0)) {
        current_statement__ = 52;
        stan::math::validate_non_negative_index("prates", "npaq", npaq);
        current_statement__ = 53;
        stan::math::validate_non_negative_index("prates", "npastates",
          npastates);
        Eigen::Matrix<double,-1,-1> prates =
          Eigen::Matrix<double,-1,-1>::Constant(npaq, npastates,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 55;
        stan::math::validate_non_negative_index("odds", "npadest", npadest);
        Eigen::Matrix<double,-1,1> odds =
          Eigen::Matrix<double,-1,1>::Constant(npadest,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 57;
        stan::math::validate_non_negative_index("sumoddsa", "npastates",
          npastates);
        Eigen::Matrix<double,-1,1> sumoddsa =
          Eigen::Matrix<double,-1,1>::Constant(npastates,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 59;
        stan::math::validate_non_negative_index("q_full", "nqpars", nqpars);
        Eigen::Matrix<double,-1,1> q_full =
          Eigen::Matrix<double,-1,1>::Constant(nqpars,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 65;
        for (int j = 1; j <= npastates; ++j) {
          int tstart = std::numeric_limits<int>::min();
          current_statement__ = 61;
          tstart = stan::model::rvalue(traindat_inds, "traindat_inds",
                     stan::model::index_uni(j), stan::model::index_uni(1));
          int tend = std::numeric_limits<int>::min();
          current_statement__ = 62;
          tend = stan::model::rvalue(traindat_inds, "traindat_inds",
                   stan::model::index_uni(j), stan::model::index_uni(2));
          current_statement__ = 63;
          stan::model::assign(prates,
            shapescale_to_rates(
              stan::model::rvalue(shape, "shape", stan::model::index_uni(j)),
              stan::model::rvalue(scale, "scale", stan::model::index_uni(j)),
              npaq,
              stan::model::rvalue(traindat_x, "traindat_x",
                stan::model::index_min_max(tstart, tend)),
              stan::model::rvalue(traindat_y, "traindat_y",
                stan::model::index_min_max(tstart, tend),
                stan::model::index_omni()),
              stan::model::rvalue(traindat_m, "traindat_m",
                stan::model::index_min_max(tstart, tend),
                stan::model::index_omni()), spline, pstream__),
            "assigning variable prates", stan::model::index_min_max(1, npaq),
            stan::model::index_uni(j));
        }
        current_statement__ = 79;
        if (stan::math::logical_gt(npadest, 0)) {
          current_statement__ = 74;
          for (int i = 1; i <= npadest; ++i) {
            current_statement__ = 72;
            if (stan::math::logical_eq(
                  stan::model::rvalue(dest_base, "dest_base",
                    stan::model::index_uni(i)), 1)) {
              current_statement__ = 69;
              stan::model::assign(odds, 1, "assigning variable odds",
                stan::model::index_uni(i));
              current_statement__ = 70;
              stan::model::assign(sumoddsa,
                stan::model::rvalue(odds, "odds", stan::model::index_uni(i)),
                "assigning variable sumoddsa",
                stan::model::index_uni(
                  stan::model::rvalue(dest_state, "dest_state",
                    stan::model::index_uni(i))));
            } else {
              current_statement__ = 66;
              stan::model::assign(odds,
                stan::math::exp(
                  stan::model::rvalue(logoddsabs, "logoddsabs",
                    stan::model::index_uni(
                      stan::model::rvalue(loind, "loind",
                        stan::model::index_uni(i))))),
                "assigning variable odds", stan::model::index_uni(i));
              current_statement__ = 67;
              stan::model::assign(sumoddsa,
                (stan::model::rvalue(sumoddsa, "sumoddsa",
                   stan::model::index_uni(
                     stan::model::rvalue(dest_state, "dest_state",
                       stan::model::index_uni(i)))) +
                stan::model::rvalue(odds, "odds", stan::model::index_uni(i))),
                "assigning variable sumoddsa",
                stan::model::index_uni(
                  stan::model::rvalue(dest_state, "dest_state",
                    stan::model::index_uni(i))));
            }
          }
          current_statement__ = 77;
          for (int i = 1; i <= npadest; ++i) {
            current_statement__ = 75;
            stan::model::assign(padest,
              (stan::model::rvalue(odds, "odds", stan::model::index_uni(i)) /
              stan::model::rvalue(sumoddsa, "sumoddsa",
                stan::model::index_uni(
                  stan::model::rvalue(dest_state, "dest_state",
                    stan::model::index_uni(i))))),
              "assigning variable padest", stan::model::index_uni(i));
          }
        }
        current_statement__ = 86;
        for (int i = 1; i <= npaqall; ++i) {
          current_statement__ = 84;
          if ((stan::math::primitive_value(stan::math::logical_gt(npadest, 0))
              &&
              stan::math::primitive_value(
                stan::model::rvalue(prate_abs, "prate_abs",
                  stan::model::index_uni(i))))) {
            current_statement__ = 82;
            stan::model::assign(q_full,
              (stan::model::rvalue(prates, "prates",
                 stan::model::index_uni(
                   stan::model::rvalue(praterow, "praterow",
                     stan::model::index_uni(i))),
                 stan::model::index_uni(
                   stan::model::rvalue(pastate, "pastate",
                     stan::model::index_uni(i)))) *
              stan::model::rvalue(padest, "padest",
                stan::model::index_uni(
                  stan::model::rvalue(dest_inds, "dest_inds",
                    stan::model::index_uni(i))))),
              "assigning variable q_full",
              stan::model::index_uni(
                stan::model::rvalue(paq_inds, "paq_inds",
                  stan::model::index_uni(i))));
          } else {
            current_statement__ = 80;
            stan::model::assign(q_full,
              stan::model::rvalue(prates, "prates",
                stan::model::index_uni(
                  stan::model::rvalue(praterow, "praterow",
                    stan::model::index_uni(i))),
                stan::model::index_uni(
                  stan::model::rvalue(pastate, "pastate",
                    stan::model::index_uni(i)))),
              "assigning variable q_full",
              stan::model::index_uni(
                stan::model::rvalue(paq_inds, "paq_inds",
                  stan::model::index_uni(i))));
          }
        }
        current_statement__ = 89;
        for (int i = 1; i <= npriorq; ++i) {
          current_statement__ = 87;
          stan::model::assign(q_full,
            stan::math::exp(
              stan::model::rvalue(logq_markov, "logq_markov",
                stan::model::index_uni(i))), "assigning variable q_full",
            stan::model::index_uni(
              stan::model::rvalue(priorq_inds, "priorq_inds",
                stan::model::index_uni(i))));
        }
        current_statement__ = 93;
        for (int i = 1; i <= nqpars; ++i) {
          current_statement__ = 90;
          stan::model::assign(q_full,
            stan::math::fmax(
              stan::model::rvalue(q_full, "q_full", stan::model::index_uni(i)),
              1e-08), "assigning variable q_full", stan::model::index_uni(i));
          current_statement__ = 91;
          stan::model::assign(logq,
            stan::math::log(
              stan::model::rvalue(q_full, "q_full", stan::model::index_uni(i))),
            "assigning variable logq", stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 50;
        for (int i = 1; i <= npriorq; ++i) {
          current_statement__ = 48;
          stan::model::assign(logq,
            stan::model::rvalue(logq_markov, "logq_markov",
              stan::model::index_uni(i)), "assigning variable logq",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 107;
      for (int j = 1; j <= ntlc; ++j) {
        current_statement__ = 96;
        stan::model::assign(Q, stan::math::rep_matrix(0, K, K),
          "assigning variable Q", stan::model::index_uni(j),
          stan::model::index_omni(), stan::model::index_omni());
        current_statement__ = 102;
        for (int i = 1; i <= nqpars; ++i) {
          current_statement__ = 97;
          stan::model::assign(qtmp,
            stan::model::rvalue(logq, "logq", stan::model::index_uni(i)),
            "assigning variable qtmp", stan::model::index_uni(i));
          current_statement__ = 99;
          if (stan::math::logical_gt(
                stan::model::rvalue(nxq, "nxq", stan::model::index_uni(i)), 0)) {
            current_statement__ = 98;
            stan::model::assign(qtmp,
              (stan::model::rvalue(qtmp, "qtmp", stan::model::index_uni(i)) +
              stan::math::multiply(
                stan::model::rvalue(X, "X", stan::model::index_uni(j),
                  stan::model::index_min_max(
                    stan::model::rvalue(xstart, "xstart",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(xend, "xend",
                      stan::model::index_uni(i)))),
                stan::model::rvalue(loghr, "loghr",
                  stan::model::index_min_max(
                    stan::model::rvalue(xstart, "xstart",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(xend, "xend",
                      stan::model::index_uni(i)))))),
              "assigning variable qtmp", stan::model::index_uni(i));
          }
          current_statement__ = 100;
          stan::model::assign(Q,
            stan::math::exp(
              stan::model::rvalue(qtmp, "qtmp", stan::model::index_uni(i))),
            "assigning variable Q", stan::model::index_uni(j),
            stan::model::index_uni(
              stan::model::rvalue(qrow, "qrow", stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(qcol, "qcol", stan::model::index_uni(i))));
        }
        current_statement__ = 105;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 103;
          stan::model::assign(Q,
            -stan::math::sum(
               stan::model::rvalue(Q, "Q", stan::model::index_uni(j),
                 stan::model::index_uni(k), stan::model::index_min_max(1, K))),
            "assigning variable Q", stan::model::index_uni(j),
            stan::model::index_uni(k), stan::model::index_uni(k));
        }
      }
      current_statement__ = 110;
      for (int i = 1; i <= ntlc; ++i) {
        current_statement__ = 108;
        stan::model::assign(P,
          stan::math::matrix_exp(
            stan::math::multiply(
              stan::model::rvalue(Q, "Q", stan::model::index_uni(i),
                stan::model::index_omni(), stan::model::index_omni()),
              stan::model::rvalue(timelag, "timelag",
                stan::model::index_uni(i)))), "assigning variable P",
          stan::model::index_uni(i), stan::model::index_omni(),
          stan::model::index_omni());
      }
      current_statement__ = 129;
      for (int i = 1; i <= nindiv; ++i) {
        current_statement__ = 111;
        stan::math::validate_non_negative_index("mp", "TI[i]",
          stan::model::rvalue(TI, "TI", stan::model::index_uni(i)));
        current_statement__ = 112;
        stan::math::validate_non_negative_index("mp", "K", K);
        std::vector<std::vector<double>> mp =
          std::vector<std::vector<double>>(stan::model::rvalue(TI, "TI",
                                             stan::model::index_uni(i)),
            std::vector<double>(K, std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 115;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 114;
          stan::model::assign(mp,
            (stan::model::rvalue(E, "E", stan::model::index_uni(k),
               stan::model::index_uni(
                 stan::model::rvalue(obs, "obs",
                   stan::model::index_uni(
                     stan::model::rvalue(starti, "starti",
                       stan::model::index_uni(i)))))) *
            stan::model::rvalue(initprobs, "initprobs",
              stan::model::index_uni(i), stan::model::index_uni(k))),
            "assigning variable mp", stan::model::index_uni(1),
            stan::model::index_uni(k));
        }
        current_statement__ = 126;
        if (stan::math::logical_gt(
              stan::model::rvalue(TI, "TI", stan::model::index_uni(i)), 1)) {
          current_statement__ = 124;
          for (int t = 2; t <=
               stan::model::rvalue(TI, "TI", stan::model::index_uni(i)); ++t) {
            int oi = std::numeric_limits<int>::min();
            current_statement__ = 116;
            oi = ((stan::model::rvalue(starti, "starti",
                     stan::model::index_uni(i))
              - 1) + t);
            current_statement__ = 122;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 119;
              for (int j = 1; j <= K; ++j) {
                current_statement__ = 117;
                stan::model::assign(mp_jk,
                  ((stan::model::rvalue(mp, "mp",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(j)) *
                  stan::model::rvalue(P, "P",
                    stan::model::index_uni(
                      stan::model::rvalue(tlcid, "tlcid",
                        stan::model::index_uni(oi))),
                    stan::model::index_uni(j), stan::model::index_uni(k))) *
                  stan::model::rvalue(E, "E", stan::model::index_uni(k),
                    stan::model::index_uni(
                      stan::model::rvalue(obs, "obs",
                        stan::model::index_uni(oi))))),
                  "assigning variable mp_jk", stan::model::index_uni(j));
              }
              current_statement__ = 120;
              stan::model::assign(mp,
                stan::math::sum(
                  stan::model::rvalue(mp_jk, "mp_jk",
                    stan::model::index_min_max(1, K))),
                "assigning variable mp", stan::model::index_uni(t),
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 127;
        loglik = (loglik +
          stan::math::log(
            stan::math::sum(
              stan::model::rvalue(mp, "mp",
                stan::model::index_uni(
                  stan::model::rvalue(TI, "TI", stan::model::index_uni(i))),
                stan::model::index_min_max(1, K)))));
      }
      current_statement__ = 140;
      if (stan::math::logical_gt(nsoj, 0)) {
        current_statement__ = 130;
        stan::math::validate_non_negative_index("Ptmp", "K", K);
        current_statement__ = 131;
        stan::math::validate_non_negative_index("Ptmp", "K", K);
        Eigen::Matrix<double,-1,-1> Ptmp =
          Eigen::Matrix<double,-1,-1>::Constant(K, K,
            std::numeric_limits<double>::quiet_NaN());
        double sprob = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 138;
        for (int i = 1; i <= nsoj; ++i) {
          current_statement__ = 134;
          stan::model::assign(Ptmp,
            stan::math::matrix_exp(
              stan::math::multiply(
                stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(
                    stan::model::rvalue(sojtlcid, "sojtlcid",
                      stan::model::index_uni(i))), stan::model::index_omni(),
                  stan::model::index_omni()),
                stan::model::rvalue(sojtime, "sojtime",
                  stan::model::index_uni(i)))), "assigning variable Ptmp");
          current_statement__ = 135;
          sprob = stan::model::rvalue(Ptmp, "Ptmp",
                    stan::model::index_uni(
                      stan::model::rvalue(sojstate, "sojstate",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(
                      stan::model::rvalue(sojstate, "sojstate",
                        stan::model::index_uni(i))));
          current_statement__ = 136;
          loglik = (loglik +
            stan::math::binomial_lpmf<false>(
              stan::model::rvalue(sojy, "sojy", stan::model::index_uni(i)),
              stan::model::rvalue(sojn, "sojn", stan::model::index_uni(i)),
              sprob));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(loglik);
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(E[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(evec);
        out__.write(shape);
        out__.write(scale);
        out__.write(padest);
        out__.write(logq);
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= ntlc; ++sym3__) {
              out__.write(stan::model::rvalue(Q, "Q",
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
        out__.write(qtmp);
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= ntlc; ++sym3__) {
              out__.write(stan::model::rvalue(P, "P",
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
        out__.write(mp_jk);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> logq_markov =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npriorq, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(logq_markov,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(npriorq),
        "assigning variable logq_markov");
      out__.write(logq_markov);
      Eigen::Matrix<local_scalar_t__,-1,1> logshape =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(logshape,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(npastates),
        "assigning variable logshape");
      out__.write(logshape);
      Eigen::Matrix<local_scalar_t__,-1,1> logscale =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(logscale,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(npastates),
        "assigning variable logscale");
      out__.write(logscale);
      std::vector<local_scalar_t__> logoddse =
        std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(logoddse,
        in__.read<std::vector<local_scalar_t__>>(nepars),
        "assigning variable logoddse");
      out__.write(logoddse);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nx, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(loghr,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nx),
        "assigning variable loghr");
      out__.write(loghr);
      Eigen::Matrix<local_scalar_t__,-1,1> logoddsabs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(noddsabs, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(logoddsabs,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(noddsabs),
        "assigning variable logoddsabs");
      out__.write(logoddsabs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "logq_markov",
        "double", std::vector<size_t>{static_cast<size_t>(npriorq)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "logshape",
        "double", std::vector<size_t>{static_cast<size_t>(npastates)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "logscale",
        "double", std::vector<size_t>{static_cast<size_t>(npastates)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "logoddse",
        "double", std::vector<size_t>{static_cast<size_t>(nepars)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "loghr", "double",
        std::vector<size_t>{static_cast<size_t>(nx)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "logoddsabs",
        "double", std::vector<size_t>{static_cast<size_t>(noddsabs)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> logq_markov =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npriorq, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> logq_markov_flat__;
        current_statement__ = 1;
        logq_markov_flat__ = context__.vals_r("logq_markov");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= npriorq; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(logq_markov, logq_markov_flat__[(pos__ - 1)],
            "assigning variable logq_markov", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(logq_markov);
      Eigen::Matrix<local_scalar_t__,-1,1> logshape =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> logshape_flat__;
        current_statement__ = 2;
        logshape_flat__ = context__.vals_r("logshape");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(logshape, logshape_flat__[(pos__ - 1)],
            "assigning variable logshape", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(logshape);
      Eigen::Matrix<local_scalar_t__,-1,1> logscale =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(npastates,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> logscale_flat__;
        current_statement__ = 3;
        logscale_flat__ = context__.vals_r("logscale");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(logscale, logscale_flat__[(pos__ - 1)],
            "assigning variable logscale", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(logscale);
      std::vector<local_scalar_t__> logoddse =
        std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
      current_statement__ = 4;
      logoddse = context__.vals_r("logoddse");
      out__.write(logoddse);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nx, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> loghr_flat__;
        current_statement__ = 5;
        loghr_flat__ = context__.vals_r("loghr");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= nx; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(loghr, loghr_flat__[(pos__ - 1)],
            "assigning variable loghr", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(loghr);
      Eigen::Matrix<local_scalar_t__,-1,1> logoddsabs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(noddsabs, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> logoddsabs_flat__;
        current_statement__ = 6;
        logoddsabs_flat__ = context__.vals_r("logoddsabs");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= noddsabs; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(logoddsabs, logoddsabs_flat__[(pos__ - 1)],
            "assigning variable logoddsabs", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(logoddsabs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"logq_markov", "logshape", "logscale",
                "logoddse", "loghr", "logoddsabs"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"loglik", "E", "evec", "shape", "scale", "padest", "logq", "Q",
             "qtmp", "P", "mp_jk"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    npriorq)},
                std::vector<size_t>{static_cast<size_t>(npastates)},
                std::vector<size_t>{static_cast<size_t>(npastates)},
                std::vector<size_t>{static_cast<size_t>(nepars)},
                std::vector<size_t>{static_cast<size_t>(nx)},
                std::vector<size_t>{static_cast<size_t>(noddsabs)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(K),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(nepars)},
             std::vector<size_t>{static_cast<size_t>(npastates)},
             std::vector<size_t>{static_cast<size_t>(npastates)},
             std::vector<size_t>{static_cast<size_t>(npadest)},
             std::vector<size_t>{static_cast<size_t>(nqpars)},
             std::vector<size_t>{static_cast<size_t>(ntlc),
               static_cast<size_t>(K), static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(nqpars)},
             std::vector<size_t>{static_cast<size_t>(ntlc),
               static_cast<size_t>(K), static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= npriorq; ++sym1__) {
      param_names__.emplace_back(std::string() + "logq_markov" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
      param_names__.emplace_back(std::string() + "logshape" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
      param_names__.emplace_back(std::string() + "logscale" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nepars; ++sym1__) {
      param_names__.emplace_back(std::string() + "logoddse" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nx; ++sym1__) {
      param_names__.emplace_back(std::string() + "loghr" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= noddsabs; ++sym1__) {
      param_names__.emplace_back(std::string() + "logoddsabs" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "E" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nepars; ++sym1__) {
        param_names__.emplace_back(std::string() + "evec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
        param_names__.emplace_back(std::string() + "shape" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
        param_names__.emplace_back(std::string() + "scale" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= npadest; ++sym1__) {
        param_names__.emplace_back(std::string() + "padest" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nqpars; ++sym1__) {
        param_names__.emplace_back(std::string() + "logq" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= ntlc; ++sym3__) {
            param_names__.emplace_back(std::string() + "Q" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= nqpars; ++sym1__) {
        param_names__.emplace_back(std::string() + "qtmp" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= ntlc; ++sym3__) {
            param_names__.emplace_back(std::string() + "P" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "mp_jk" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= npriorq; ++sym1__) {
      param_names__.emplace_back(std::string() + "logq_markov" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
      param_names__.emplace_back(std::string() + "logshape" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
      param_names__.emplace_back(std::string() + "logscale" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nepars; ++sym1__) {
      param_names__.emplace_back(std::string() + "logoddse" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nx; ++sym1__) {
      param_names__.emplace_back(std::string() + "loghr" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= noddsabs; ++sym1__) {
      param_names__.emplace_back(std::string() + "logoddsabs" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "E" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nepars; ++sym1__) {
        param_names__.emplace_back(std::string() + "evec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
        param_names__.emplace_back(std::string() + "shape" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= npastates; ++sym1__) {
        param_names__.emplace_back(std::string() + "scale" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= npadest; ++sym1__) {
        param_names__.emplace_back(std::string() + "padest" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nqpars; ++sym1__) {
        param_names__.emplace_back(std::string() + "logq" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= ntlc; ++sym3__) {
            param_names__.emplace_back(std::string() + "Q" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= nqpars; ++sym1__) {
        param_names__.emplace_back(std::string() + "qtmp" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= ntlc; ++sym3__) {
            param_names__.emplace_back(std::string() + "P" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "mp_jk" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"logq_markov\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npriorq) + "},\"block\":\"parameters\"},{\"name\":\"logshape\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npastates) + "},\"block\":\"parameters\"},{\"name\":\"logscale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npastates) + "},\"block\":\"parameters\"},{\"name\":\"logoddse\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nepars) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"loghr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nx) + "},\"block\":\"parameters\"},{\"name\":\"logoddsabs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(noddsabs) + "},\"block\":\"parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"evec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nepars) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"shape\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npastates) + "},\"block\":\"transformed_parameters\"},{\"name\":\"scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npastates) + "},\"block\":\"transformed_parameters\"},{\"name\":\"padest\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npadest) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nqpars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ntlc) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"qtmp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nqpars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"P\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ntlc) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"mp_jk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"logq_markov\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npriorq) + "},\"block\":\"parameters\"},{\"name\":\"logshape\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npastates) + "},\"block\":\"parameters\"},{\"name\":\"logscale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npastates) + "},\"block\":\"parameters\"},{\"name\":\"logoddse\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nepars) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"loghr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nx) + "},\"block\":\"parameters\"},{\"name\":\"logoddsabs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(noddsabs) + "},\"block\":\"parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"evec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nepars) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"shape\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npastates) + "},\"block\":\"transformed_parameters\"},{\"name\":\"scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npastates) + "},\"block\":\"transformed_parameters\"},{\"name\":\"padest\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(npadest) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nqpars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ntlc) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"qtmp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nqpars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"P\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ntlc) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"mp_jk\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((npriorq + npastates) + npastates) +
      nepars) + nx) + noddsabs);
    const size_t num_transformed = emit_transformed_parameters * (((((((((((1
      + (K * K)) + nepars) + npastates) + npastates) + npadest) + nqpars) +
      ((ntlc * K) * K)) + nqpars) + ((ntlc * K) * K)) + K));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((npriorq + npastates) + npastates) +
      nepars) + nx) + noddsabs);
    const size_t num_transformed = emit_transformed_parameters * (((((((((((1
      + (K * K)) + nepars) + npastates) + npastates) + npadest) + nqpars) +
      ((ntlc * K) * K)) + nqpars) + ((ntlc * K) * K)) + K));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_hmm_namespace::model_hmm;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_hmm_namespace::profiles__;
}
#endif
#endif
