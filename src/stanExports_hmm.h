// Generated by rstantools.  Do not edit by hand.

/*
    msmbayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    msmbayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with msmbayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_hmm_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 180> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 52, column 2 to column 22)",
  " (in 'string', line 53, column 2 to column 30)",
  " (in 'string', line 54, column 2 to column 19)",
  " (in 'string', line 57, column 2 to column 18)",
  " (in 'string', line 58, column 2 to column 55)",
  " (in 'string', line 59, column 2 to column 26)",
  " (in 'string', line 61, column 10 to column 11)",
  " (in 'string', line 61, column 4 to column 26)",
  " (in 'string', line 62, column 10 to column 16)",
  " (in 'string', line 62, column 4 to column 29)",
  " (in 'string', line 64, column 6 to column 21)",
  " (in 'string', line 63, column 18 to line 65, column 5)",
  " (in 'string', line 63, column 4 to line 65, column 5)",
  " (in 'string', line 67, column 6 to column 34)",
  " (in 'string', line 68, column 6 to column 53)",
  " (in 'string', line 66, column 23 to line 69, column 5)",
  " (in 'string', line 66, column 4 to line 69, column 5)",
  " (in 'string', line 71, column 6 to column 51)",
  " (in 'string', line 70, column 18 to line 72, column 5)",
  " (in 'string', line 70, column 4 to line 72, column 5)",
  " (in 'string', line 74, column 6 to column 44)",
  " (in 'string', line 73, column 23 to line 75, column 5)",
  " (in 'string', line 73, column 4 to line 75, column 5)",
  " (in 'string', line 77, column 6 to column 35)",
  " (in 'string', line 76, column 23 to line 78, column 5)",
  " (in 'string', line 76, column 4 to line 78, column 5)",
  " (in 'string', line 80, column 6 to column 41)",
  " (in 'string', line 79, column 22 to line 81, column 5)",
  " (in 'string', line 79, column 4 to line 81, column 5)",
  " (in 'string', line 83, column 6 to column 33)",
  " (in 'string', line 82, column 19 to line 84, column 5)",
  " (in 'string', line 82, column 4 to line 84, column 5)",
  " (in 'string', line 87, column 10 to column 14)",
  " (in 'string', line 87, column 23 to column 24)",
  " (in 'string', line 87, column 25 to column 26)",
  " (in 'string', line 87, column 4 to column 30)",
  " (in 'string', line 90, column 11 to column 17)",
  " (in 'string', line 90, column 4 to column 24)",
  " (in 'string', line 91, column 10 to column 14)",
  " (in 'string', line 91, column 23 to column 24)",
  " (in 'string', line 91, column 25 to column 26)",
  " (in 'string', line 91, column 4 to column 30)",
  " (in 'string', line 94, column 6 to column 35)",
  " (in 'string', line 96, column 1 to column 19)",
  " (in 'string', line 98, column 3 to column 73)",
  " (in 'string', line 97, column 1 to line 98, column 73)",
  " (in 'string', line 99, column 1 to column 37)",
  " (in 'string', line 95, column 25 to line 100, column 7)",
  " (in 'string', line 95, column 6 to line 100, column 7)",
  " (in 'string', line 102, column 1 to column 31)",
  " (in 'string', line 101, column 21 to line 103, column 7)",
  " (in 'string', line 101, column 6 to line 103, column 7)",
  " (in 'string', line 93, column 21 to line 104, column 5)",
  " (in 'string', line 93, column 4 to line 104, column 5)",
  " (in 'string', line 106, column 10 to column 11)",
  " (in 'string', line 106, column 4 to column 24)",
  " (in 'string', line 109, column 6 to column 45)",
  " (in 'string', line 108, column 21 to line 110, column 5)",
  " (in 'string', line 108, column 4 to line 110, column 5)",
  " (in 'string', line 112, column 12 to column 17)",
  " (in 'string', line 112, column 18 to column 19)",
  " (in 'string', line 112, column 6 to column 29)",
  " (in 'string', line 115, column 1 to column 49)",
  " (in 'string', line 114, column 6 to line 115, column 49)",
  " (in 'string', line 118, column 3 to column 30)",
  " (in 'string', line 121, column 7 to column 62)",
  " (in 'string', line 120, column 19 to line 122, column 6)",
  " (in 'string', line 120, column 5 to line 122, column 6)",
  " (in 'string', line 123, column 5 to column 31)",
  " (in 'string', line 119, column 17 to line 124, column 4)",
  " (in 'string', line 119, column 3 to line 124, column 4)",
  " (in 'string', line 117, column 19 to line 125, column 2)",
  " (in 'string', line 117, column 1 to line 125, column 2)",
  " (in 'string', line 116, column 18 to line 126, column 7)",
  " (in 'string', line 116, column 6 to line 126, column 7)",
  " (in 'string', line 127, column 6 to column 40)",
  " (in 'string', line 111, column 23 to line 128, column 5)",
  " (in 'string', line 111, column 4 to line 128, column 5)",
  " (in 'string', line 130, column 13 to column 14)",
  " (in 'string', line 130, column 15 to column 16)",
  " (in 'string', line 130, column 6 to column 23)",
  " (in 'string', line 131, column 6 to column 17)",
  " (in 'string', line 133, column 1 to column 48)",
  " (in 'string', line 134, column 1 to column 39)",
  " (in 'string', line 135, column 1 to column 51)",
  " (in 'string', line 132, column 23 to line 136, column 7)",
  " (in 'string', line 132, column 6 to line 136, column 7)",
  " (in 'string', line 129, column 17 to line 137, column 5)",
  " (in 'string', line 129, column 4 to line 137, column 5)",
  " (in 'string', line 60, column 2 to line 138, column 3)",
  " (in 'string', line 143, column 4 to column 45)",
  " (in 'string', line 142, column 21 to line 144, column 3)",
  " (in 'string', line 142, column 2 to line 144, column 3)",
  " (in 'string', line 147, column 6 to column 50)",
  " (in 'string', line 146, column 19 to line 148, column 5)",
  " (in 'string', line 146, column 4 to line 148, column 5)",
  " (in 'string', line 145, column 13 to line 149, column 3)",
  " (in 'string', line 145, column 2 to line 149, column 3)",
  " (in 'string', line 152, column 6 to column 49)",
  " (in 'string', line 151, column 23 to line 153, column 5)",
  " (in 'string', line 151, column 4 to line 153, column 5)",
  " (in 'string', line 150, column 17 to line 154, column 3)",
  " (in 'string', line 150, column 2 to line 154, column 3)",
  " (in 'string', line 156, column 2 to column 19)",
  " (in 'string', line 10, column 2 to column 17)",
  " (in 'string', line 11, column 2 to column 17)",
  " (in 'string', line 12, column 2 to column 22)",
  " (in 'string', line 13, column 2 to column 22)",
  " (in 'string', line 14, column 2 to column 22)",
  " (in 'string', line 15, column 2 to column 21)",
  " (in 'string', line 16, column 8 to column 14)",
  " (in 'string', line 16, column 2 to column 36)",
  " (in 'string', line 17, column 8 to column 14)",
  " (in 'string', line 17, column 2 to column 32)",
  " (in 'string', line 18, column 8 to column 14)",
  " (in 'string', line 18, column 15 to column 16)",
  " (in 'string', line 18, column 2 to column 50)",
  " (in 'string', line 19, column 8 to column 14)",
  " (in 'string', line 19, column 2 to column 42)",
  " (in 'string', line 20, column 8 to column 14)",
  " (in 'string', line 20, column 2 to column 42)",
  " (in 'string', line 21, column 8 to column 14)",
  " (in 'string', line 21, column 2 to column 42)",
  " (in 'string', line 22, column 8 to column 14)",
  " (in 'string', line 22, column 2 to column 42)",
  " (in 'string', line 23, column 8 to column 13)",
  " (in 'string', line 23, column 2 to column 44)",
  " (in 'string', line 24, column 8 to column 13)",
  " (in 'string', line 24, column 2 to column 44)",
  " (in 'string', line 25, column 8 to column 13)",
  " (in 'string', line 25, column 2 to column 42)",
  " (in 'string', line 26, column 17 to column 18)",
  " (in 'string', line 26, column 2 to column 20)",
  " (in 'string', line 27, column 8 to column 14)",
  " (in 'string', line 27, column 2 to column 29)",
  " (in 'string', line 28, column 8 to column 14)",
  " (in 'string', line 28, column 2 to column 36)",
  " (in 'string', line 29, column 8 to column 9)",
  " (in 'string', line 29, column 2 to column 36)",
  " (in 'string', line 30, column 2 to column 20)",
  " (in 'string', line 31, column 8 to column 9)",
  " (in 'string', line 31, column 2 to column 41)",
  " (in 'string', line 32, column 8 to column 12)",
  " (in 'string', line 32, column 2 to column 36)",
  " (in 'string', line 33, column 8 to column 14)",
  " (in 'string', line 33, column 2 to column 30)",
  " (in 'string', line 34, column 8 to column 14)",
  " (in 'string', line 34, column 2 to column 37)",
  " (in 'string', line 35, column 2 to column 18)",
  " (in 'string', line 36, column 8 to column 14)",
  " (in 'string', line 36, column 2 to column 36)",
  " (in 'string', line 37, column 8 to column 14)",
  " (in 'string', line 37, column 2 to column 34)",
  " (in 'string', line 38, column 8 to column 14)",
  " (in 'string', line 38, column 2 to column 33)",
  " (in 'string', line 39, column 9 to column 13)",
  " (in 'string', line 39, column 14 to column 16)",
  " (in 'string', line 39, column 2 to column 20)",
  " (in 'string', line 40, column 8 to column 10)",
  " (in 'string', line 40, column 2 to column 27)",
  " (in 'string', line 41, column 8 to column 10)",
  " (in 'string', line 41, column 2 to column 34)",
  " (in 'string', line 43, column 2 to column 20)",
  " (in 'string', line 44, column 8 to column 12)",
  " (in 'string', line 44, column 2 to column 32)",
  " (in 'string', line 45, column 8 to column 12)",
  " (in 'string', line 45, column 2 to column 32)",
  " (in 'string', line 46, column 8 to column 12)",
  " (in 'string', line 46, column 2 to column 36)",
  " (in 'string', line 47, column 8 to column 12)",
  " (in 'string', line 47, column 2 to column 36)",
  " (in 'string', line 48, column 8 to column 12)",
  " (in 'string', line 48, column 2 to column 47)",
  " (in 'string', line 52, column 9 to column 15)",
  " (in 'string', line 53, column 8 to column 14)",
  " (in 'string', line 54, column 9 to column 11)",
  " (in 'string', line 58, column 8 to column 9)",
  " (in 'string', line 58, column 18 to column 19)",
  " (in 'string', line 59, column 8 to column 14)"};
#include <stan_meta_header.hpp>
class model_hmm final : public model_base_crtp<model_hmm> {
private:
  int K;
  int T;
  int nqpars;
  int nepars;
  int nindiv;
  int nefix;
  std::vector<int> starti;
  std::vector<int> TI;
  std::vector<std::vector<double>> initprobs;
  std::vector<int> qrow;
  std::vector<int> qcol;
  std::vector<int> erow;
  std::vector<int> ecol;
  std::vector<int> efixrow;
  std::vector<int> efixcol;
  std::vector<double> efix;
  std::vector<double> sumefixed;
  std::vector<double> loemean;
  std::vector<double> loesd;
  std::vector<int> obs;
  int ntlc;
  std::vector<int> tlcid;
  std::vector<double> timelag;
  std::vector<double> logqmean;
  std::vector<double> logqsd;
  int nx;
  std::vector<int> xstart;
  std::vector<int> xend;
  std::vector<int> nxq;
  Eigen::Matrix<double,-1,-1> X_data__;
  std::vector<double> loghrmean;
  std::vector<double> loghrsd;
  int nsoj;
  std::vector<int> sojy;
  std::vector<int> sojn;
  std::vector<int> sojstate;
  std::vector<double> sojtime;
  std::vector<int> sojtlcid;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
public:
  ~model_hmm() {}
  model_hmm(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_hmm_namespace::model_hmm";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 105;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 105;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 106;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 106;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "nqpars", "int",
        std::vector<size_t>{});
      nqpars = std::numeric_limits<int>::min();
      current_statement__ = 107;
      nqpars = context__.vals_i("nqpars")[(1 - 1)];
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "nqpars", nqpars, 0);
      current_statement__ = 108;
      context__.validate_dims("data initialization", "nepars", "int",
        std::vector<size_t>{});
      nepars = std::numeric_limits<int>::min();
      current_statement__ = 108;
      nepars = context__.vals_i("nepars")[(1 - 1)];
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "nepars", nepars, 0);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "nindiv", "int",
        std::vector<size_t>{});
      nindiv = std::numeric_limits<int>::min();
      current_statement__ = 109;
      nindiv = context__.vals_i("nindiv")[(1 - 1)];
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "nindiv", nindiv, 1);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "nefix", "int",
        std::vector<size_t>{});
      nefix = std::numeric_limits<int>::min();
      current_statement__ = 110;
      nefix = context__.vals_i("nefix")[(1 - 1)];
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "nefix", nefix, 0);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("starti", "nindiv", nindiv);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "starti", "int",
        std::vector<size_t>{static_cast<size_t>(nindiv)});
      starti = std::vector<int>(nindiv, std::numeric_limits<int>::min());
      current_statement__ = 112;
      starti = context__.vals_i("starti");
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "starti", starti, 1);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("TI", "nindiv", nindiv);
      current_statement__ = 114;
      context__.validate_dims("data initialization", "TI", "int",
        std::vector<size_t>{static_cast<size_t>(nindiv)});
      TI = std::vector<int>(nindiv, std::numeric_limits<int>::min());
      current_statement__ = 114;
      TI = context__.vals_i("TI");
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "TI", TI, 1);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("initprobs", "nindiv", nindiv);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("initprobs", "K", K);
      current_statement__ = 117;
      context__.validate_dims("data initialization", "initprobs", "double",
        std::vector<size_t>{static_cast<size_t>(nindiv),
          static_cast<size_t>(K)});
      initprobs = std::vector<std::vector<double>>(nindiv,
                    std::vector<double>(K,
                      std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> initprobs_flat__;
        current_statement__ = 117;
        initprobs_flat__ = context__.vals_r("initprobs");
        current_statement__ = 117;
        pos__ = 1;
        current_statement__ = 117;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 117;
          for (int sym2__ = 1; sym2__ <= nindiv; ++sym2__) {
            current_statement__ = 117;
            stan::model::assign(initprobs, initprobs_flat__[(pos__ - 1)],
              "assigning variable initprobs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 117;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 117;
      stan::math::check_greater_or_equal(function__, "initprobs", initprobs,
        0);
      current_statement__ = 117;
      stan::math::check_less_or_equal(function__, "initprobs", initprobs, 1);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("qrow", "nqpars", nqpars);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "qrow", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      qrow = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 119;
      qrow = context__.vals_i("qrow");
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "qrow", qrow, 1);
      current_statement__ = 119;
      stan::math::check_less_or_equal(function__, "qrow", qrow, K);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("qcol", "nqpars", nqpars);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "qcol", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      qcol = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 121;
      qcol = context__.vals_i("qcol");
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__, "qcol", qcol, 1);
      current_statement__ = 121;
      stan::math::check_less_or_equal(function__, "qcol", qcol, K);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("erow", "nepars", nepars);
      current_statement__ = 123;
      context__.validate_dims("data initialization", "erow", "int",
        std::vector<size_t>{static_cast<size_t>(nepars)});
      erow = std::vector<int>(nepars, std::numeric_limits<int>::min());
      current_statement__ = 123;
      erow = context__.vals_i("erow");
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__, "erow", erow, 1);
      current_statement__ = 123;
      stan::math::check_less_or_equal(function__, "erow", erow, K);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("ecol", "nepars", nepars);
      current_statement__ = 125;
      context__.validate_dims("data initialization", "ecol", "int",
        std::vector<size_t>{static_cast<size_t>(nepars)});
      ecol = std::vector<int>(nepars, std::numeric_limits<int>::min());
      current_statement__ = 125;
      ecol = context__.vals_i("ecol");
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__, "ecol", ecol, 1);
      current_statement__ = 125;
      stan::math::check_less_or_equal(function__, "ecol", ecol, K);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("efixrow", "nefix", nefix);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "efixrow", "int",
        std::vector<size_t>{static_cast<size_t>(nefix)});
      efixrow = std::vector<int>(nefix, std::numeric_limits<int>::min());
      current_statement__ = 127;
      efixrow = context__.vals_i("efixrow");
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "efixrow", efixrow, 1);
      current_statement__ = 127;
      stan::math::check_less_or_equal(function__, "efixrow", efixrow, K);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("efixcol", "nefix", nefix);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "efixcol", "int",
        std::vector<size_t>{static_cast<size_t>(nefix)});
      efixcol = std::vector<int>(nefix, std::numeric_limits<int>::min());
      current_statement__ = 129;
      efixcol = context__.vals_i("efixcol");
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "efixcol", efixcol, 1);
      current_statement__ = 129;
      stan::math::check_less_or_equal(function__, "efixcol", efixcol, K);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("efix", "nefix", nefix);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "efix", "double",
        std::vector<size_t>{static_cast<size_t>(nefix)});
      efix = std::vector<double>(nefix,
               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 131;
      efix = context__.vals_r("efix");
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "efix", efix, 0);
      current_statement__ = 131;
      stan::math::check_less_or_equal(function__, "efix", efix, 1);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("sumefixed", "K", K);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "sumefixed", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      sumefixed = std::vector<double>(K,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 133;
      sumefixed = context__.vals_r("sumefixed");
      current_statement__ = 134;
      stan::math::validate_non_negative_index("loemean", "nepars", nepars);
      current_statement__ = 135;
      context__.validate_dims("data initialization", "loemean", "double",
        std::vector<size_t>{static_cast<size_t>(nepars)});
      loemean = std::vector<double>(nepars,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 135;
      loemean = context__.vals_r("loemean");
      current_statement__ = 136;
      stan::math::validate_non_negative_index("loesd", "nepars", nepars);
      current_statement__ = 137;
      context__.validate_dims("data initialization", "loesd", "double",
        std::vector<size_t>{static_cast<size_t>(nepars)});
      loesd = std::vector<double>(nepars,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 137;
      loesd = context__.vals_r("loesd");
      current_statement__ = 137;
      stan::math::check_greater_or_equal(function__, "loesd", loesd, 0);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("obs", "T", T);
      current_statement__ = 139;
      context__.validate_dims("data initialization", "obs", "int",
        std::vector<size_t>{static_cast<size_t>(T)});
      obs = std::vector<int>(T, std::numeric_limits<int>::min());
      current_statement__ = 139;
      obs = context__.vals_i("obs");
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "obs", obs, 1);
      current_statement__ = 139;
      stan::math::check_less_or_equal(function__, "obs", obs, K);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "ntlc", "int",
        std::vector<size_t>{});
      ntlc = std::numeric_limits<int>::min();
      current_statement__ = 140;
      ntlc = context__.vals_i("ntlc")[(1 - 1)];
      current_statement__ = 140;
      stan::math::check_greater_or_equal(function__, "ntlc", ntlc, 1);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("tlcid", "T", T);
      current_statement__ = 142;
      context__.validate_dims("data initialization", "tlcid", "int",
        std::vector<size_t>{static_cast<size_t>(T)});
      tlcid = std::vector<int>(T, std::numeric_limits<int>::min());
      current_statement__ = 142;
      tlcid = context__.vals_i("tlcid");
      current_statement__ = 142;
      stan::math::check_greater_or_equal(function__, "tlcid", tlcid, 0);
      current_statement__ = 142;
      stan::math::check_less_or_equal(function__, "tlcid", tlcid, ntlc);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("timelag", "ntlc", ntlc);
      current_statement__ = 144;
      context__.validate_dims("data initialization", "timelag", "double",
        std::vector<size_t>{static_cast<size_t>(ntlc)});
      timelag = std::vector<double>(ntlc,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 144;
      timelag = context__.vals_r("timelag");
      current_statement__ = 144;
      stan::math::check_greater_or_equal(function__, "timelag", timelag, 0);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("logqmean", "nqpars", nqpars);
      current_statement__ = 146;
      context__.validate_dims("data initialization", "logqmean", "double",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      logqmean = std::vector<double>(nqpars,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 146;
      logqmean = context__.vals_r("logqmean");
      current_statement__ = 147;
      stan::math::validate_non_negative_index("logqsd", "nqpars", nqpars);
      current_statement__ = 148;
      context__.validate_dims("data initialization", "logqsd", "double",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      logqsd = std::vector<double>(nqpars,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 148;
      logqsd = context__.vals_r("logqsd");
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__, "logqsd", logqsd, 0);
      current_statement__ = 149;
      context__.validate_dims("data initialization", "nx", "int",
        std::vector<size_t>{});
      nx = std::numeric_limits<int>::min();
      current_statement__ = 149;
      nx = context__.vals_i("nx")[(1 - 1)];
      current_statement__ = 149;
      stan::math::check_greater_or_equal(function__, "nx", nx, 0);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("xstart", "nqpars", nqpars);
      current_statement__ = 151;
      context__.validate_dims("data initialization", "xstart", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      xstart = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 151;
      xstart = context__.vals_i("xstart");
      current_statement__ = 151;
      stan::math::check_greater_or_equal(function__, "xstart", xstart, 0);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("xend", "nqpars", nqpars);
      current_statement__ = 153;
      context__.validate_dims("data initialization", "xend", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      xend = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 153;
      xend = context__.vals_i("xend");
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "xend", xend, 0);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("nxq", "nqpars", nqpars);
      current_statement__ = 155;
      context__.validate_dims("data initialization", "nxq", "int",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      nxq = std::vector<int>(nqpars, std::numeric_limits<int>::min());
      current_statement__ = 155;
      nxq = context__.vals_i("nxq");
      current_statement__ = 155;
      stan::math::check_greater_or_equal(function__, "nxq", nxq, 0);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("X", "ntlc", ntlc);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("X", "nx", nx);
      current_statement__ = 158;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(ntlc),
          static_cast<size_t>(nx)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(ntlc, nx,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), ntlc,
        nx);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 158;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 158;
        pos__ = 1;
        current_statement__ = 158;
        for (int sym1__ = 1; sym1__ <= nx; ++sym1__) {
          current_statement__ = 158;
          for (int sym2__ = 1; sym2__ <= ntlc; ++sym2__) {
            current_statement__ = 158;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 158;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 159;
      stan::math::validate_non_negative_index("loghrmean", "nx", nx);
      current_statement__ = 160;
      context__.validate_dims("data initialization", "loghrmean", "double",
        std::vector<size_t>{static_cast<size_t>(nx)});
      loghrmean = std::vector<double>(nx,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 160;
      loghrmean = context__.vals_r("loghrmean");
      current_statement__ = 161;
      stan::math::validate_non_negative_index("loghrsd", "nx", nx);
      current_statement__ = 162;
      context__.validate_dims("data initialization", "loghrsd", "double",
        std::vector<size_t>{static_cast<size_t>(nx)});
      loghrsd = std::vector<double>(nx,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 162;
      loghrsd = context__.vals_r("loghrsd");
      current_statement__ = 162;
      stan::math::check_greater_or_equal(function__, "loghrsd", loghrsd, 0);
      current_statement__ = 163;
      context__.validate_dims("data initialization", "nsoj", "int",
        std::vector<size_t>{});
      nsoj = std::numeric_limits<int>::min();
      current_statement__ = 163;
      nsoj = context__.vals_i("nsoj")[(1 - 1)];
      current_statement__ = 163;
      stan::math::check_greater_or_equal(function__, "nsoj", nsoj, 0);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("sojy", "nsoj", nsoj);
      current_statement__ = 165;
      context__.validate_dims("data initialization", "sojy", "int",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojy = std::vector<int>(nsoj, std::numeric_limits<int>::min());
      current_statement__ = 165;
      sojy = context__.vals_i("sojy");
      current_statement__ = 165;
      stan::math::check_greater_or_equal(function__, "sojy", sojy, 0);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("sojn", "nsoj", nsoj);
      current_statement__ = 167;
      context__.validate_dims("data initialization", "sojn", "int",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojn = std::vector<int>(nsoj, std::numeric_limits<int>::min());
      current_statement__ = 167;
      sojn = context__.vals_i("sojn");
      current_statement__ = 167;
      stan::math::check_greater_or_equal(function__, "sojn", sojn, 0);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("sojstate", "nsoj", nsoj);
      current_statement__ = 169;
      context__.validate_dims("data initialization", "sojstate", "int",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojstate = std::vector<int>(nsoj, std::numeric_limits<int>::min());
      current_statement__ = 169;
      sojstate = context__.vals_i("sojstate");
      current_statement__ = 169;
      stan::math::check_greater_or_equal(function__, "sojstate", sojstate, 1);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("sojtime", "nsoj", nsoj);
      current_statement__ = 171;
      context__.validate_dims("data initialization", "sojtime", "double",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojtime = std::vector<double>(nsoj,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 171;
      sojtime = context__.vals_r("sojtime");
      current_statement__ = 171;
      stan::math::check_greater_or_equal(function__, "sojtime", sojtime, 0);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("sojtlcid", "nsoj", nsoj);
      current_statement__ = 173;
      context__.validate_dims("data initialization", "sojtlcid", "int",
        std::vector<size_t>{static_cast<size_t>(nsoj)});
      sojtlcid = std::vector<int>(nsoj, std::numeric_limits<int>::min());
      current_statement__ = 173;
      sojtlcid = context__.vals_i("sojtlcid");
      current_statement__ = 173;
      stan::math::check_greater_or_equal(function__, "sojtlcid", sojtlcid, 1);
      current_statement__ = 173;
      stan::math::check_less_or_equal(function__, "sojtlcid", sojtlcid, ntlc);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("logq", "nqpars", nqpars);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("logoddse", "nepars", nepars);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("loghr", "nx", nx);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("E", "K", K);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("E", "K", K);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("evec", "nepars", nepars);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = nqpars + nepars + nx;
  }
  inline std::string model_name() const final {
    return "model_hmm";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_hmm_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> logq =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nqpars, DUMMY_VAR__);
      current_statement__ = 1;
      logq = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nqpars);
      std::vector<local_scalar_t__> logoddse =
        std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
      current_statement__ = 2;
      logoddse = in__.template read<std::vector<local_scalar_t__>>(nepars);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nx, DUMMY_VAR__);
      current_statement__ = 3;
      loghr = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nx);
      local_scalar_t__ loglik = DUMMY_VAR__;
      current_statement__ = 4;
      loglik = 0;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> E =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(K,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 5;
      stan::model::assign(E,
        stan::math::rep_array(stan::math::rep_vector(0, K), K),
        "assigning variable E");
      std::vector<local_scalar_t__> evec =
        std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
      {
        current_statement__ = 7;
        stan::math::validate_non_negative_index("sumodds", "K", K);
        std::vector<local_scalar_t__> sumodds =
          std::vector<local_scalar_t__>(K, DUMMY_VAR__);
        current_statement__ = 9;
        stan::math::validate_non_negative_index("oddse", "nepars", nepars);
        std::vector<local_scalar_t__> oddse =
          std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
        current_statement__ = 13;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 11;
          stan::model::assign(sumodds, 1, "assigning variable sumodds",
            stan::model::index_uni(i));
        }
        current_statement__ = 17;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 14;
          stan::model::assign(oddse,
            stan::math::exp(
              stan::model::rvalue(logoddse, "logoddse",
                stan::model::index_uni(i))), "assigning variable oddse",
            stan::model::index_uni(i));
          current_statement__ = 15;
          stan::model::assign(sumodds,
            (stan::model::rvalue(sumodds, "sumodds",
               stan::model::index_uni(
                 stan::model::rvalue(erow, "erow", stan::model::index_uni(i))))
            +
            stan::model::rvalue(oddse, "oddse", stan::model::index_uni(i))),
            "assigning variable sumodds",
            stan::model::index_uni(
              stan::model::rvalue(erow, "erow", stan::model::index_uni(i))));
        }
        current_statement__ = 20;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 18;
          stan::model::assign(sumodds,
            (stan::model::rvalue(sumodds, "sumodds",
               stan::model::index_uni(i)) / (1 -
            stan::model::rvalue(sumefixed, "sumefixed",
              stan::model::index_uni(i)))), "assigning variable sumodds",
            stan::model::index_uni(i));
        }
        current_statement__ = 23;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 21;
          stan::model::assign(evec,
            (stan::model::rvalue(oddse, "oddse", stan::model::index_uni(i)) /
            stan::model::rvalue(sumodds, "sumodds",
              stan::model::index_uni(
                stan::model::rvalue(erow, "erow", stan::model::index_uni(i))))),
            "assigning variable evec", stan::model::index_uni(i));
        }
        current_statement__ = 26;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 24;
          stan::model::assign(E,
            stan::model::rvalue(evec, "evec", stan::model::index_uni(i)),
            "assigning variable E",
            stan::model::index_uni(
              stan::model::rvalue(erow, "erow", stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(ecol, "ecol", stan::model::index_uni(i))));
        }
        current_statement__ = 29;
        for (int i = 1; i <= nefix; ++i) {
          current_statement__ = 27;
          stan::model::assign(E,
            stan::model::rvalue(efix, "efix", stan::model::index_uni(i)),
            "assigning variable E",
            stan::model::index_uni(
              stan::model::rvalue(efixrow, "efixrow",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(efixcol, "efixcol",
                stan::model::index_uni(i))));
        }
        current_statement__ = 32;
        for (int j = 1; j <= K; ++j) {
          current_statement__ = 30;
          stan::model::assign(E, (1 -
            stan::math::sum(
              stan::model::rvalue(E, "E", stan::model::index_uni(j),
                stan::model::index_min_max(1, K)))), "assigning variable E",
            stan::model::index_uni(j), stan::model::index_uni(j));
        }
        current_statement__ = 33;
        stan::math::validate_non_negative_index("Q", "ntlc", ntlc);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("Q", "K", K);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("Q", "K", K);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> Q =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(ntlc,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K,
              DUMMY_VAR__));
        current_statement__ = 37;
        stan::math::validate_non_negative_index("qtmp", "nqpars", nqpars);
        Eigen::Matrix<local_scalar_t__,-1,1> qtmp =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nqpars, DUMMY_VAR__);
        current_statement__ = 39;
        stan::math::validate_non_negative_index("P", "ntlc", ntlc);
        current_statement__ = 40;
        stan::math::validate_non_negative_index("P", "K", K);
        current_statement__ = 41;
        stan::math::validate_non_negative_index("P", "K", K);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> P =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(ntlc,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K,
              DUMMY_VAR__));
        current_statement__ = 54;
        for (int j = 1; j <= ntlc; ++j) {
          current_statement__ = 43;
          stan::model::assign(Q, stan::math::rep_matrix(0, K, K),
            "assigning variable Q", stan::model::index_uni(j),
            stan::model::index_omni(), stan::model::index_omni());
          current_statement__ = 49;
          for (int i = 1; i <= nqpars; ++i) {
            current_statement__ = 44;
            stan::model::assign(qtmp,
              stan::model::rvalue(logq, "logq", stan::model::index_uni(i)),
              "assigning variable qtmp", stan::model::index_uni(i));
            current_statement__ = 46;
            if (stan::math::logical_gt(
                  stan::model::rvalue(nxq, "nxq", stan::model::index_uni(i)),
                  0)) {
              current_statement__ = 45;
              stan::model::assign(qtmp,
                (stan::model::rvalue(qtmp, "qtmp", stan::model::index_uni(i))
                +
                stan::math::multiply(
                  stan::model::rvalue(X, "X", stan::model::index_uni(j),
                    stan::model::index_min_max(
                      stan::model::rvalue(xstart, "xstart",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(xend, "xend",
                        stan::model::index_uni(i)))),
                  stan::model::rvalue(loghr, "loghr",
                    stan::model::index_min_max(
                      stan::model::rvalue(xstart, "xstart",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(xend, "xend",
                        stan::model::index_uni(i)))))),
                "assigning variable qtmp", stan::model::index_uni(i));
            }
            current_statement__ = 47;
            stan::model::assign(Q,
              stan::math::exp(
                stan::model::rvalue(qtmp, "qtmp", stan::model::index_uni(i))),
              "assigning variable Q", stan::model::index_uni(j),
              stan::model::index_uni(
                stan::model::rvalue(qrow, "qrow", stan::model::index_uni(i))),
              stan::model::index_uni(
                stan::model::rvalue(qcol, "qcol", stan::model::index_uni(i))));
          }
          current_statement__ = 52;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 50;
            stan::model::assign(Q,
              -stan::math::sum(
                 stan::model::rvalue(Q, "Q", stan::model::index_uni(j),
                   stan::model::index_uni(k),
                   stan::model::index_min_max(1, K))),
              "assigning variable Q", stan::model::index_uni(j),
              stan::model::index_uni(k), stan::model::index_uni(k));
          }
        }
        current_statement__ = 55;
        stan::math::validate_non_negative_index("mp_jk", "K", K);
        std::vector<local_scalar_t__> mp_jk =
          std::vector<local_scalar_t__>(K, DUMMY_VAR__);
        current_statement__ = 59;
        for (int i = 1; i <= ntlc; ++i) {
          current_statement__ = 57;
          stan::model::assign(P,
            stan::math::matrix_exp(
              stan::math::multiply(
                stan::model::rvalue(Q, "Q", stan::model::index_uni(i),
                  stan::model::index_omni(), stan::model::index_omni()),
                stan::model::rvalue(timelag, "timelag",
                  stan::model::index_uni(i)))), "assigning variable P",
            stan::model::index_uni(i), stan::model::index_omni(),
            stan::model::index_omni());
        }
        current_statement__ = 78;
        for (int i = 1; i <= nindiv; ++i) {
          current_statement__ = 60;
          stan::math::validate_non_negative_index("mp", "TI[i]",
            stan::model::rvalue(TI, "TI", stan::model::index_uni(i)));
          current_statement__ = 61;
          stan::math::validate_non_negative_index("mp", "K", K);
          std::vector<std::vector<local_scalar_t__>> mp =
            std::vector<std::vector<local_scalar_t__>>(stan::model::rvalue(
                                                         TI, "TI",
                                                         stan::model::index_uni(
                                                           i)),
              std::vector<local_scalar_t__>(K, DUMMY_VAR__));
          current_statement__ = 64;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 63;
            stan::model::assign(mp,
              (stan::model::rvalue(E, "E", stan::model::index_uni(k),
                 stan::model::index_uni(
                   stan::model::rvalue(obs, "obs",
                     stan::model::index_uni(
                       stan::model::rvalue(starti, "starti",
                         stan::model::index_uni(i)))))) *
              stan::model::rvalue(initprobs, "initprobs",
                stan::model::index_uni(i), stan::model::index_uni(k))),
              "assigning variable mp", stan::model::index_uni(1),
              stan::model::index_uni(k));
          }
          current_statement__ = 75;
          if (stan::math::logical_gt(
                stan::model::rvalue(TI, "TI", stan::model::index_uni(i)), 1)) {
            current_statement__ = 73;
            for (int t = 2; t <=
                 stan::model::rvalue(TI, "TI", stan::model::index_uni(i)); ++t) {
              int oi = std::numeric_limits<int>::min();
              current_statement__ = 65;
              oi = ((stan::model::rvalue(starti, "starti",
                       stan::model::index_uni(i))
                - 1) + t);
              current_statement__ = 71;
              for (int k = 1; k <= K; ++k) {
                current_statement__ = 68;
                for (int j = 1; j <= K; ++j) {
                  current_statement__ = 66;
                  stan::model::assign(mp_jk,
                    ((stan::model::rvalue(mp, "mp",
                        stan::model::index_uni((t - 1)),
                        stan::model::index_uni(j)) *
                    stan::model::rvalue(P, "P",
                      stan::model::index_uni(
                        stan::model::rvalue(tlcid, "tlcid",
                          stan::model::index_uni(oi))),
                      stan::model::index_uni(j), stan::model::index_uni(k)))
                    *
                    stan::model::rvalue(E, "E", stan::model::index_uni(k),
                      stan::model::index_uni(
                        stan::model::rvalue(obs, "obs",
                          stan::model::index_uni(oi))))),
                    "assigning variable mp_jk", stan::model::index_uni(j));
                }
                current_statement__ = 69;
                stan::model::assign(mp,
                  stan::math::sum(
                    stan::model::rvalue(mp_jk, "mp_jk",
                      stan::model::index_min_max(1, K))),
                  "assigning variable mp", stan::model::index_uni(t),
                  stan::model::index_uni(k));
              }
            }
          }
          current_statement__ = 76;
          loglik = (loglik +
            stan::math::log(
              stan::math::sum(
                stan::model::rvalue(mp, "mp",
                  stan::model::index_uni(
                    stan::model::rvalue(TI, "TI", stan::model::index_uni(i))),
                  stan::model::index_min_max(1, K)))));
        }
        current_statement__ = 89;
        if (stan::math::logical_gt(nsoj, 0)) {
          current_statement__ = 79;
          stan::math::validate_non_negative_index("Ptmp", "K", K);
          current_statement__ = 80;
          stan::math::validate_non_negative_index("Ptmp", "K", K);
          Eigen::Matrix<local_scalar_t__,-1,-1> Ptmp =
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K,
              DUMMY_VAR__);
          local_scalar_t__ sprob = DUMMY_VAR__;
          current_statement__ = 87;
          for (int i = 1; i <= nsoj; ++i) {
            current_statement__ = 83;
            stan::model::assign(Ptmp,
              stan::math::matrix_exp(
                stan::math::multiply(
                  stan::model::rvalue(Q, "Q",
                    stan::model::index_uni(
                      stan::model::rvalue(sojtlcid, "sojtlcid",
                        stan::model::index_uni(i))),
                    stan::model::index_omni(), stan::model::index_omni()),
                  stan::model::rvalue(sojtime, "sojtime",
                    stan::model::index_uni(i)))), "assigning variable Ptmp");
            current_statement__ = 84;
            sprob = stan::model::rvalue(Ptmp, "Ptmp",
                      stan::model::index_uni(
                        stan::model::rvalue(sojstate, "sojstate",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(sojstate, "sojstate",
                          stan::model::index_uni(i))));
            current_statement__ = 85;
            loglik = (loglik +
              stan::math::binomial_lpmf<false>(
                stan::model::rvalue(sojy, "sojy", stan::model::index_uni(i)),
                stan::model::rvalue(sojn, "sojn", stan::model::index_uni(i)),
                sprob));
          }
        }
      }
      {
        current_statement__ = 93;
        for (int i = 1; i <= nqpars; ++i) {
          current_statement__ = 91;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(logq, "logq",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(logqmean, "logqmean",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(logqsd, "logqsd",
                             stan::model::index_uni(i))));
        }
        current_statement__ = 98;
        if (stan::math::logical_gt(nx, 0)) {
          current_statement__ = 96;
          for (int i = 1; i <= nx; ++i) {
            current_statement__ = 94;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(loghr, "loghr",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loghrmean, "loghrmean",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loghrsd, "loghrsd",
                               stan::model::index_uni(i))));
          }
        }
        current_statement__ = 103;
        if (stan::math::logical_gt(nepars, 0)) {
          current_statement__ = 101;
          for (int i = 1; i <= nepars; ++i) {
            current_statement__ = 99;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(logoddse, "logoddse",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loemean, "loemean",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(loesd, "loesd",
                               stan::model::index_uni(i))));
          }
        }
        current_statement__ = 104;
        lp_accum__.add(loglik);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_hmm_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> logq =
        Eigen::Matrix<double,-1,1>::Constant(nqpars,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      logq = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nqpars);
      std::vector<double> logoddse =
        std::vector<double>(nepars, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      logoddse = in__.template read<std::vector<local_scalar_t__>>(nepars);
      Eigen::Matrix<double,-1,1> loghr =
        Eigen::Matrix<double,-1,1>::Constant(nx,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      loghr = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(nx);
      double loglik = std::numeric_limits<double>::quiet_NaN();
      std::vector<Eigen::Matrix<double,-1,1>> E =
        std::vector<Eigen::Matrix<double,-1,1>>(K,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> evec =
        std::vector<double>(nepars, std::numeric_limits<double>::quiet_NaN());
      out__.write(logq);
      out__.write(logoddse);
      out__.write(loghr);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 4;
      loglik = 0;
      current_statement__ = 5;
      stan::model::assign(E,
        stan::math::rep_array(stan::math::rep_vector(0, K), K),
        "assigning variable E");
      {
        current_statement__ = 7;
        stan::math::validate_non_negative_index("sumodds", "K", K);
        std::vector<double> sumodds =
          std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 9;
        stan::math::validate_non_negative_index("oddse", "nepars", nepars);
        std::vector<double> oddse =
          std::vector<double>(nepars,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 13;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 11;
          stan::model::assign(sumodds, 1, "assigning variable sumodds",
            stan::model::index_uni(i));
        }
        current_statement__ = 17;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 14;
          stan::model::assign(oddse,
            stan::math::exp(
              stan::model::rvalue(logoddse, "logoddse",
                stan::model::index_uni(i))), "assigning variable oddse",
            stan::model::index_uni(i));
          current_statement__ = 15;
          stan::model::assign(sumodds,
            (stan::model::rvalue(sumodds, "sumodds",
               stan::model::index_uni(
                 stan::model::rvalue(erow, "erow", stan::model::index_uni(i))))
            +
            stan::model::rvalue(oddse, "oddse", stan::model::index_uni(i))),
            "assigning variable sumodds",
            stan::model::index_uni(
              stan::model::rvalue(erow, "erow", stan::model::index_uni(i))));
        }
        current_statement__ = 20;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 18;
          stan::model::assign(sumodds,
            (stan::model::rvalue(sumodds, "sumodds",
               stan::model::index_uni(i)) / (1 -
            stan::model::rvalue(sumefixed, "sumefixed",
              stan::model::index_uni(i)))), "assigning variable sumodds",
            stan::model::index_uni(i));
        }
        current_statement__ = 23;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 21;
          stan::model::assign(evec,
            (stan::model::rvalue(oddse, "oddse", stan::model::index_uni(i)) /
            stan::model::rvalue(sumodds, "sumodds",
              stan::model::index_uni(
                stan::model::rvalue(erow, "erow", stan::model::index_uni(i))))),
            "assigning variable evec", stan::model::index_uni(i));
        }
        current_statement__ = 26;
        for (int i = 1; i <= nepars; ++i) {
          current_statement__ = 24;
          stan::model::assign(E,
            stan::model::rvalue(evec, "evec", stan::model::index_uni(i)),
            "assigning variable E",
            stan::model::index_uni(
              stan::model::rvalue(erow, "erow", stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(ecol, "ecol", stan::model::index_uni(i))));
        }
        current_statement__ = 29;
        for (int i = 1; i <= nefix; ++i) {
          current_statement__ = 27;
          stan::model::assign(E,
            stan::model::rvalue(efix, "efix", stan::model::index_uni(i)),
            "assigning variable E",
            stan::model::index_uni(
              stan::model::rvalue(efixrow, "efixrow",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(efixcol, "efixcol",
                stan::model::index_uni(i))));
        }
        current_statement__ = 32;
        for (int j = 1; j <= K; ++j) {
          current_statement__ = 30;
          stan::model::assign(E, (1 -
            stan::math::sum(
              stan::model::rvalue(E, "E", stan::model::index_uni(j),
                stan::model::index_min_max(1, K)))), "assigning variable E",
            stan::model::index_uni(j), stan::model::index_uni(j));
        }
        current_statement__ = 33;
        stan::math::validate_non_negative_index("Q", "ntlc", ntlc);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("Q", "K", K);
        current_statement__ = 35;
        stan::math::validate_non_negative_index("Q", "K", K);
        std::vector<Eigen::Matrix<double,-1,-1>> Q =
          std::vector<Eigen::Matrix<double,-1,-1>>(ntlc,
            Eigen::Matrix<double,-1,-1>::Constant(K, K,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 37;
        stan::math::validate_non_negative_index("qtmp", "nqpars", nqpars);
        Eigen::Matrix<double,-1,1> qtmp =
          Eigen::Matrix<double,-1,1>::Constant(nqpars,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 39;
        stan::math::validate_non_negative_index("P", "ntlc", ntlc);
        current_statement__ = 40;
        stan::math::validate_non_negative_index("P", "K", K);
        current_statement__ = 41;
        stan::math::validate_non_negative_index("P", "K", K);
        std::vector<Eigen::Matrix<double,-1,-1>> P =
          std::vector<Eigen::Matrix<double,-1,-1>>(ntlc,
            Eigen::Matrix<double,-1,-1>::Constant(K, K,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 54;
        for (int j = 1; j <= ntlc; ++j) {
          current_statement__ = 43;
          stan::model::assign(Q, stan::math::rep_matrix(0, K, K),
            "assigning variable Q", stan::model::index_uni(j),
            stan::model::index_omni(), stan::model::index_omni());
          current_statement__ = 49;
          for (int i = 1; i <= nqpars; ++i) {
            current_statement__ = 44;
            stan::model::assign(qtmp,
              stan::model::rvalue(logq, "logq", stan::model::index_uni(i)),
              "assigning variable qtmp", stan::model::index_uni(i));
            current_statement__ = 46;
            if (stan::math::logical_gt(
                  stan::model::rvalue(nxq, "nxq", stan::model::index_uni(i)),
                  0)) {
              current_statement__ = 45;
              stan::model::assign(qtmp,
                (stan::model::rvalue(qtmp, "qtmp", stan::model::index_uni(i))
                +
                stan::math::multiply(
                  stan::model::rvalue(X, "X", stan::model::index_uni(j),
                    stan::model::index_min_max(
                      stan::model::rvalue(xstart, "xstart",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(xend, "xend",
                        stan::model::index_uni(i)))),
                  stan::model::rvalue(loghr, "loghr",
                    stan::model::index_min_max(
                      stan::model::rvalue(xstart, "xstart",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(xend, "xend",
                        stan::model::index_uni(i)))))),
                "assigning variable qtmp", stan::model::index_uni(i));
            }
            current_statement__ = 47;
            stan::model::assign(Q,
              stan::math::exp(
                stan::model::rvalue(qtmp, "qtmp", stan::model::index_uni(i))),
              "assigning variable Q", stan::model::index_uni(j),
              stan::model::index_uni(
                stan::model::rvalue(qrow, "qrow", stan::model::index_uni(i))),
              stan::model::index_uni(
                stan::model::rvalue(qcol, "qcol", stan::model::index_uni(i))));
          }
          current_statement__ = 52;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 50;
            stan::model::assign(Q,
              -stan::math::sum(
                 stan::model::rvalue(Q, "Q", stan::model::index_uni(j),
                   stan::model::index_uni(k),
                   stan::model::index_min_max(1, K))),
              "assigning variable Q", stan::model::index_uni(j),
              stan::model::index_uni(k), stan::model::index_uni(k));
          }
        }
        current_statement__ = 55;
        stan::math::validate_non_negative_index("mp_jk", "K", K);
        std::vector<double> mp_jk =
          std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 59;
        for (int i = 1; i <= ntlc; ++i) {
          current_statement__ = 57;
          stan::model::assign(P,
            stan::math::matrix_exp(
              stan::math::multiply(
                stan::model::rvalue(Q, "Q", stan::model::index_uni(i),
                  stan::model::index_omni(), stan::model::index_omni()),
                stan::model::rvalue(timelag, "timelag",
                  stan::model::index_uni(i)))), "assigning variable P",
            stan::model::index_uni(i), stan::model::index_omni(),
            stan::model::index_omni());
        }
        current_statement__ = 78;
        for (int i = 1; i <= nindiv; ++i) {
          current_statement__ = 60;
          stan::math::validate_non_negative_index("mp", "TI[i]",
            stan::model::rvalue(TI, "TI", stan::model::index_uni(i)));
          current_statement__ = 61;
          stan::math::validate_non_negative_index("mp", "K", K);
          std::vector<std::vector<double>> mp =
            std::vector<std::vector<double>>(stan::model::rvalue(TI, "TI",
                                               stan::model::index_uni(i)),
              std::vector<double>(K,
                std::numeric_limits<double>::quiet_NaN()));
          current_statement__ = 64;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 63;
            stan::model::assign(mp,
              (stan::model::rvalue(E, "E", stan::model::index_uni(k),
                 stan::model::index_uni(
                   stan::model::rvalue(obs, "obs",
                     stan::model::index_uni(
                       stan::model::rvalue(starti, "starti",
                         stan::model::index_uni(i)))))) *
              stan::model::rvalue(initprobs, "initprobs",
                stan::model::index_uni(i), stan::model::index_uni(k))),
              "assigning variable mp", stan::model::index_uni(1),
              stan::model::index_uni(k));
          }
          current_statement__ = 75;
          if (stan::math::logical_gt(
                stan::model::rvalue(TI, "TI", stan::model::index_uni(i)), 1)) {
            current_statement__ = 73;
            for (int t = 2; t <=
                 stan::model::rvalue(TI, "TI", stan::model::index_uni(i)); ++t) {
              int oi = std::numeric_limits<int>::min();
              current_statement__ = 65;
              oi = ((stan::model::rvalue(starti, "starti",
                       stan::model::index_uni(i))
                - 1) + t);
              current_statement__ = 71;
              for (int k = 1; k <= K; ++k) {
                current_statement__ = 68;
                for (int j = 1; j <= K; ++j) {
                  current_statement__ = 66;
                  stan::model::assign(mp_jk,
                    ((stan::model::rvalue(mp, "mp",
                        stan::model::index_uni((t - 1)),
                        stan::model::index_uni(j)) *
                    stan::model::rvalue(P, "P",
                      stan::model::index_uni(
                        stan::model::rvalue(tlcid, "tlcid",
                          stan::model::index_uni(oi))),
                      stan::model::index_uni(j), stan::model::index_uni(k)))
                    *
                    stan::model::rvalue(E, "E", stan::model::index_uni(k),
                      stan::model::index_uni(
                        stan::model::rvalue(obs, "obs",
                          stan::model::index_uni(oi))))),
                    "assigning variable mp_jk", stan::model::index_uni(j));
                }
                current_statement__ = 69;
                stan::model::assign(mp,
                  stan::math::sum(
                    stan::model::rvalue(mp_jk, "mp_jk",
                      stan::model::index_min_max(1, K))),
                  "assigning variable mp", stan::model::index_uni(t),
                  stan::model::index_uni(k));
              }
            }
          }
          current_statement__ = 76;
          loglik = (loglik +
            stan::math::log(
              stan::math::sum(
                stan::model::rvalue(mp, "mp",
                  stan::model::index_uni(
                    stan::model::rvalue(TI, "TI", stan::model::index_uni(i))),
                  stan::model::index_min_max(1, K)))));
        }
        current_statement__ = 89;
        if (stan::math::logical_gt(nsoj, 0)) {
          current_statement__ = 79;
          stan::math::validate_non_negative_index("Ptmp", "K", K);
          current_statement__ = 80;
          stan::math::validate_non_negative_index("Ptmp", "K", K);
          Eigen::Matrix<double,-1,-1> Ptmp =
            Eigen::Matrix<double,-1,-1>::Constant(K, K,
              std::numeric_limits<double>::quiet_NaN());
          double sprob = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 87;
          for (int i = 1; i <= nsoj; ++i) {
            current_statement__ = 83;
            stan::model::assign(Ptmp,
              stan::math::matrix_exp(
                stan::math::multiply(
                  stan::model::rvalue(Q, "Q",
                    stan::model::index_uni(
                      stan::model::rvalue(sojtlcid, "sojtlcid",
                        stan::model::index_uni(i))),
                    stan::model::index_omni(), stan::model::index_omni()),
                  stan::model::rvalue(sojtime, "sojtime",
                    stan::model::index_uni(i)))), "assigning variable Ptmp");
            current_statement__ = 84;
            sprob = stan::model::rvalue(Ptmp, "Ptmp",
                      stan::model::index_uni(
                        stan::model::rvalue(sojstate, "sojstate",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(
                        stan::model::rvalue(sojstate, "sojstate",
                          stan::model::index_uni(i))));
            current_statement__ = 85;
            loglik = (loglik +
              stan::math::binomial_lpmf<false>(
                stan::model::rvalue(sojy, "sojy", stan::model::index_uni(i)),
                stan::model::rvalue(sojn, "sojn", stan::model::index_uni(i)),
                sprob));
          }
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(loglik);
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            out__.write(E[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(evec);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> logq =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nqpars, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(logq,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nqpars),
        "assigning variable logq");
      out__.write(logq);
      std::vector<local_scalar_t__> logoddse =
        std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(logoddse,
        in__.read<std::vector<local_scalar_t__>>(nepars),
        "assigning variable logoddse");
      out__.write(logoddse);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nx, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(loghr,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nx),
        "assigning variable loghr");
      out__.write(loghr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "logq", "double",
        std::vector<size_t>{static_cast<size_t>(nqpars)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "logoddse",
        "double", std::vector<size_t>{static_cast<size_t>(nepars)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "loghr", "double",
        std::vector<size_t>{static_cast<size_t>(nx)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> logq =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nqpars, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> logq_flat__;
        current_statement__ = 1;
        logq_flat__ = context__.vals_r("logq");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= nqpars; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(logq, logq_flat__[(pos__ - 1)],
            "assigning variable logq", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(logq);
      std::vector<local_scalar_t__> logoddse =
        std::vector<local_scalar_t__>(nepars, DUMMY_VAR__);
      current_statement__ = 2;
      logoddse = context__.vals_r("logoddse");
      out__.write(logoddse);
      Eigen::Matrix<local_scalar_t__,-1,1> loghr =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nx, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> loghr_flat__;
        current_statement__ = 3;
        loghr_flat__ = context__.vals_r("loghr");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nx; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(loghr, loghr_flat__[(pos__ - 1)],
            "assigning variable loghr", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(loghr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"logq", "logoddse", "loghr"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"loglik", "E", "evec"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    nqpars)},
                std::vector<size_t>{static_cast<size_t>(nepars)},
                std::vector<size_t>{static_cast<size_t>(nx)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(K),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(nepars)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nqpars; ++sym1__) {
      param_names__.emplace_back(std::string() + "logq" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nepars; ++sym1__) {
      param_names__.emplace_back(std::string() + "logoddse" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nx; ++sym1__) {
      param_names__.emplace_back(std::string() + "loghr" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "E" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nepars; ++sym1__) {
        param_names__.emplace_back(std::string() + "evec" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nqpars; ++sym1__) {
      param_names__.emplace_back(std::string() + "logq" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nepars; ++sym1__) {
      param_names__.emplace_back(std::string() + "logoddse" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nx; ++sym1__) {
      param_names__.emplace_back(std::string() + "loghr" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "E" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nepars; ++sym1__) {
        param_names__.emplace_back(std::string() + "evec" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"logq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nqpars) + "},\"block\":\"parameters\"},{\"name\":\"logoddse\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nepars) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"loghr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nx) + "},\"block\":\"parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"evec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nepars) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"logq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nqpars) + "},\"block\":\"parameters\"},{\"name\":\"logoddse\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nepars) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"loghr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nx) + "},\"block\":\"parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"evec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nepars) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((nqpars + nepars) + nx);
    const size_t num_transformed = emit_transformed_parameters * (((1 + (K *
      K)) + nepars));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((nqpars + nepars) + nx);
    const size_t num_transformed = emit_transformed_parameters * (((1 + (K *
      K)) + nepars));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_hmm_namespace::model_hmm;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_hmm_namespace::profiles__;
}
#endif
#endif
